{
    "pipes": [],
    "interfaces": [
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f",
            "file": "apps/vtr-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "checkadd",
            "id": "interface-checkadd-59deb52ea0cb8dffd8479a1f1c5750a0",
            "file": "stories/checkbox/checkbox.stories.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  boolean,\r\n  withKnobs,\r\n  color,\r\n  button,\r\n  select,\r\n} from '@storybook/addon-knobs';\r\nimport { Meta } from '@storybook/angular/types-6-0';\r\nimport checkbox from './checkbox.component';\r\nimport { withDesign } from 'storybook-addon-designs';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { Component } from '@angular/core';\r\nimport checkboxComponent from './checkbox.component';\r\n\r\nexport interface checkadd {\r\n  name: string;\r\n  checked: boolean;\r\n  id: number;\r\n}\r\n\r\nexport default {\r\n  title: 'Checkbox',\r\n  component: checkboxComponent,\r\n  decorators: [\r\n    withKnobs,\r\n    moduleMetadata({\r\n      imports: [MatCheckboxModule, MatListModule],\r\n    }),\r\n  ],\r\n} as Meta;\r\n\r\nexport const Primary = () => ({\r\n  component: checkbox,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    backgroundColor: color(\r\n      'backgroundColor',\r\n      'rgba(255,255,255,1)',\r\n      'Background'\r\n    ),\r\n    isprimary: true,\r\n  },\r\n});\r\nPrimary.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892',\r\n    },\r\n  },\r\n};\r\n\r\nexport const Error = () => ({\r\n  component: checkbox,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    iserror: true,\r\n  },\r\n});\r\nError.story = {};\r\n\r\nconst label = 'Add Checkbox';\r\nconst handler = () => add(checkbox_list);\r\nconst handler1 = () => remove(checkbox_list);\r\nlet checkbox_list = [\r\n  {\r\n    name: 'Group Checkbox Label 1',\r\n    checked: false,\r\n    id: 1,\r\n  },\r\n  {\r\n    name: 'Group Checkbox Label 2',\r\n    checked: false,\r\n    id: 2,\r\n  },\r\n  {\r\n    name: 'Group Checkbox Label 3',\r\n    checked: false,\r\n    id: 3,\r\n  },\r\n];\r\nfunction add(checkbox_list) {\r\n  let arrLength = checkbox_list.length;\r\n  const check: checkadd = {\r\n    name: 'Group Checkbox Label ' + ++arrLength,\r\n    checked: false,\r\n    id: arrLength + 1,\r\n  };\r\n  checkbox_list.push(check);\r\n  return checkbox_list;\r\n}\r\n\r\nfunction remove(checkbox_list) {\r\n  checkbox_list.pop();\r\n}\r\n\r\nexport const Group = () => ({\r\n  component: checkbox,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    add: button(label, handler),\r\n    remove: button('Remove Checkbox', handler1),\r\n    isgroup: true,\r\n    values: checkbox_list,\r\n  },\r\n});\r\nGroup.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892',\r\n    },\r\n  },\r\n};\r\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IHomeproduct",
            "id": "interface-IHomeproduct-a7dbfc7b2d9d406d8e9a1794aac754b8",
            "file": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
            "type": "interface",
            "sourceCode": "import { HomeproductActionTypes } from '../actions/homeproduct.actions';\r\n\r\ninterface IHomeproduct {\r\n  list: [];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: IHomeproduct = {\r\n  list: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n/**\r\n * @function\r\n * @param {any}\r\n * @param {any}\r\n * @return {string}\r\n */\r\nexport function HomeproductReducer(state: IHomeproduct = initialState, action) {\r\n  switch (action.type) {\r\n    case HomeproductActionTypes.LoadHomeproducts: {\r\n      const newState = { ...state };\r\n      newState.loading = true;\r\n      return newState;\r\n    }\r\n    case HomeproductActionTypes.LoadHomeproductsSuccess: {\r\n      const newState = { ...state };\r\n      newState.list = action.payload.items.data;\r\n      newState.loading = false;\r\n      return newState;\r\n    }\r\n    case HomeproductActionTypes.LoadHomeproductsFailure: {\r\n      const newState = { ...state };\r\n      newState.list = [];\r\n      newState.error = 'Error getting Homeproducts';\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "list",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "radioAdd",
            "id": "interface-radioAdd-adcdaa8f3230c301db284c1ee1656b40",
            "file": "stories/radiobutton/radiobutton.stories.ts",
            "type": "interface",
            "sourceCode": "import { boolean, withKnobs, color, button } from '@storybook/addon-knobs';\r\nimport { Meta } from '@storybook/angular/types-6-0';\r\nimport radiobutton from './radiobutton.component';\r\nimport { withDesign } from 'storybook-addon-designs';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\nexport default {\r\n  title: 'Radiobutton',\r\n  component: radiobutton,\r\n  decorators: [\r\n    withKnobs,\r\n    moduleMetadata({\r\n      imports: [MatRadioModule, MatListModule],\r\n    }),\r\n  ],\r\n} as Meta;\r\n\r\nexport interface radioAdd {\r\n  name: string;\r\n  id: number;\r\n}\r\n\r\n\r\nexport const Primary = () => ({\r\n  component: radiobutton,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    horizontal: boolean('horizontal', false),\r\n    isprimary: true,\r\n    backgroundColor: color(\r\n        'backgroundColor',\r\n        'rgba(255,255,255,1)',\r\n        'Background'\r\n      ),\r\n  },\r\n});\r\nPrimary.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053',\r\n    },\r\n  }\r\n};\r\n\r\nexport const Error = () => ({\r\n  component: radiobutton,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    horizontal: boolean('horizontal', false),\r\n    iserror: true,\r\n  },\r\n});\r\nError.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053',\r\n    },\r\n  }\r\n};\r\n\r\n\r\n\r\nconst label = 'Add Radio Button';\r\nconst handler = () => add(radioBtn_list);\r\nconst handler1 = () => remove(radioBtn_list);\r\nlet radioBtn_list = [\r\n  {\r\n    name: 'Radio Button 1',\r\n    id: 1,\r\n  },\r\n  {\r\n    name: 'Radio Button 2',\r\n    id: 2,\r\n  },\r\n  {\r\n    name: 'Radio Button 3',\r\n    id: 3,\r\n  },\r\n];\r\nfunction add(radioBtn_list) {\r\n  let arrLength = radioBtn_list.length;\r\n  const check: radioAdd = {\r\n    name: 'Radio Button ' + ++arrLength,\r\n    id: arrLength + 1,\r\n  };\r\n  radioBtn_list.push(check);\r\n  return radioBtn_list;\r\n}\r\n\r\nfunction remove(radioBtn_list) {\r\n  radioBtn_list.pop();\r\n}\r\nexport const Group = () => ({\r\n  component: radiobutton,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    isgroup: true,\r\n    values: radioBtn_list,\r\n    add: button(label, handler),\r\n    remove: button('Remove Radio Button', handler1),\r\n  },\r\n});\r\nGroup.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053',\r\n    },\r\n  }\r\n};\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-b14971fd7efae2320776ac3b000b1f8a",
            "file": "apps/vtr/src/app/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { environment } from '../../environments/environment';\r\nimport { HomeproductReducer } from './homeproduct.reducer';\r\n\r\nexport const applicationStateFeatureKey = 'applicationState';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface State {}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  homeproducts: HomeproductReducer,\r\n};\r\n\r\nexport const metaReducers: MetaReducer<State>[] = !environment.production\r\n  ? []\r\n  : [];\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "homeproductEffect",
            "id": "injectable-homeproductEffect-26a1d1afb3d0ffb33b7aa1750ed07ce6",
            "file": "apps/vtr/src/app/effects/homeproduct.ts",
            "properties": [
                {
                    "name": "getHomeproducts$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(HomeproductActionTypes.LoadHomeproducts),\r\n      mergeMap(() => {\r\n        return this.homeproduct$.getHomeproducts().pipe(\r\n          map((response) => {\r\n            return new LoadHomeproductsSuccess({ items: response });\r\n          })\r\n        );\r\n      })\r\n    );\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\r\nimport {\r\n  LoadHomeproductsSuccess,\r\n  HomeproductActionTypes,\r\n} from '../actions/homeproduct.actions';\r\nimport { HomeproductsService } from '../services/homeproducts.service';\r\nimport { mergeMap, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n/**\r\n * @class\r\n */\r\nexport class homeproductEffect {\r\n  getHomeproducts$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(HomeproductActionTypes.LoadHomeproducts),\r\n      mergeMap(() => {\r\n        return this.homeproduct$.getHomeproducts().pipe(\r\n          map((response) => {\r\n            return new LoadHomeproductsSuccess({ items: response });\r\n          })\r\n        );\r\n      })\r\n    );\r\n  });\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(\r\n    private actions$: Actions,\r\n    private homeproduct$: HomeproductsService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "homeproduct$",
                        "type": "HomeproductsService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "homeproduct$",
                        "type": "HomeproductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HomeproductsService",
            "id": "injectable-HomeproductsService-3574750918b1bf52ef83bce222abb136",
            "file": "apps/vtr/src/app/services/homeproducts.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getHomeproducts",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "description": "",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 304,
                                "end": 310,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "",
                            "returnType": "string"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n/**\r\n * @class\r\n */\r\nexport class HomeproductsService {\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(private http: HttpClient) {}\r\n  /**\r\n   * @function\r\n   * @return {string}\r\n   */\r\n  getHomeproducts() {\r\n    return this.http.get(\r\n      'https://directus.projects.prodaptconsulting.com/directus/items/basic_pages'\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "LoadHomeproducts",
            "id": "class-LoadHomeproducts-aca260ec06f40777fe9dafcd4ba9657b",
            "file": "apps/vtr/src/app/actions/homeproduct.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum HomeproductActionTypes {\r\n  LoadHomeproducts = '[Homeproduct] Load Homeproducts',\r\n  LoadHomeproductsSuccess = '[Homeproduct] Load Homeproducts Success',\r\n  LoadHomeproductsFailure = '[Homeproduct] Load Homeproducts Failure',\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproducts implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproducts;\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproductsSuccess implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproductsSuccess;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(public payload: { items: any }) {}\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproductsFailure implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproductsFailure;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(public payload: { items: any }) {}\r\n}\r\n\r\nexport type HomeproductActions =\r\n  | LoadHomeproducts\r\n  | LoadHomeproductsSuccess\r\n  | LoadHomeproductsFailure;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "HomeproductActionTypes.LoadHomeproducts",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 348,
                    "end": 354,
                    "flags": 0,
                    "kind": 290,
                    "atToken": {
                        "pos": 348,
                        "end": 349,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 349,
                        "end": 354,
                        "flags": 0,
                        "escapedText": "class"
                    }
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadHomeproductsFailure",
            "id": "class-LoadHomeproductsFailure-aca260ec06f40777fe9dafcd4ba9657b",
            "file": "apps/vtr/src/app/actions/homeproduct.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum HomeproductActionTypes {\r\n  LoadHomeproducts = '[Homeproduct] Load Homeproducts',\r\n  LoadHomeproductsSuccess = '[Homeproduct] Load Homeproducts Success',\r\n  LoadHomeproductsFailure = '[Homeproduct] Load Homeproducts Failure',\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproducts implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproducts;\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproductsSuccess implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproductsSuccess;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(public payload: { items: any }) {}\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproductsFailure implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproductsFailure;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(public payload: { items: any }) {}\r\n}\r\n\r\nexport type HomeproductActions =\r\n  | LoadHomeproducts\r\n  | LoadHomeproductsSuccess\r\n  | LoadHomeproductsFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "HomeproductActionTypes.LoadHomeproductsFailure",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 715,
                    "end": 721,
                    "flags": 0,
                    "kind": 290,
                    "atToken": {
                        "pos": 715,
                        "end": 716,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 716,
                        "end": 721,
                        "flags": 0,
                        "escapedText": "class"
                    }
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadHomeproductsSuccess",
            "id": "class-LoadHomeproductsSuccess-aca260ec06f40777fe9dafcd4ba9657b",
            "file": "apps/vtr/src/app/actions/homeproduct.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum HomeproductActionTypes {\r\n  LoadHomeproducts = '[Homeproduct] Load Homeproducts',\r\n  LoadHomeproductsSuccess = '[Homeproduct] Load Homeproducts Success',\r\n  LoadHomeproductsFailure = '[Homeproduct] Load Homeproducts Failure',\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproducts implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproducts;\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproductsSuccess implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproductsSuccess;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(public payload: { items: any }) {}\r\n}\r\n/**\r\n * @class\r\n */\r\nexport class LoadHomeproductsFailure implements Action {\r\n  readonly type = HomeproductActionTypes.LoadHomeproductsFailure;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(public payload: { items: any }) {}\r\n}\r\n\r\nexport type HomeproductActions =\r\n  | LoadHomeproducts\r\n  | LoadHomeproductsSuccess\r\n  | LoadHomeproductsFailure;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "HomeproductActionTypes.LoadHomeproductsSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 483,
                    "end": 489,
                    "flags": 0,
                    "kind": 290,
                    "atToken": {
                        "pos": 483,
                        "end": 484,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 484,
                        "end": 489,
                        "flags": 0,
                        "escapedText": "class"
                    }
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-295ab2e73691c05933aad75254606988",
            "file": "stories/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-alet",
            "styleUrls": [
                "./alert.scss"
            ],
            "styles": [],
            "template": "<div\n  class=\"template-fluid\"\n  [ngClass]=\"[\n      getTheme == 'VTR'? 'theme-vtr' : 'theme-flow'\n  ]\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n<div id=\"popup1\" class=\"overlay\">\n  <div class=\"popup\"\n  [ngClass]=\"[\n      category ? category : '' ,\n      fullwidth ? 'full-width-alert' : 'default-alert'\n  ]\"\n  >\n    <span class=\"popup-title\">{{title}}</span>\n    <a class=\"close\" href=\"#\">&times;</a>\n    <div class=\"content\">\n      {{content}}\n    </div>\n  </div>\n</div>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "category",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "content",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "fullwidth",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-alet',\r\n  template: `\r\n  <div\r\n    class=\"template-fluid\"\r\n    [ngClass]=\"[\r\n        getTheme == 'VTR'? 'theme-vtr' : 'theme-flow'\r\n    ]\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n  <div id=\"popup1\" class=\"overlay\">\r\n    <div class=\"popup\" \r\n    [ngClass]=\"[\r\n        category ? category : '' , \r\n        fullwidth ? 'full-width-alert' : 'default-alert' \r\n    ]\"\r\n    >\r\n      <span class=\"popup-title\">{{title}}</span>\r\n      <a class=\"close\" href=\"#\">&times;</a>\r\n      <div class=\"content\">\r\n        {{content}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div> `,\r\n  styleUrls: ['./alert.scss'],\r\n})\r\nexport default class AlertComponent {\r\n    getTheme = 'VTR';\r\n    category = \"\"\r\n    fullwidth = false;\r\n    content = \"\";\r\n    ngOnInit() {\r\n        window.addEventListener('storage', () => {\r\n          this.getTheme = sessionStorage.getItem('theme');\r\n        });\r\n      }\r\n\r\n    ngOnChanges(){\r\n      (this.content.length > 320)? ( this.content = (this.content.substr(0, 320) + '...')) : this.content;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-88749e5fc092b643d89f77d120e2c66b",
            "file": "apps/vtr/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "",
                    "jsdoctags": []
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { LoadHomeproducts } from './actions/homeproduct.actions';\r\nimport { HomeproductsService } from './services/homeproducts.service';\r\n\r\n/**\r\n * @component\r\n */\r\n@Component({\r\n  selector: 'lla-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\n\r\n/**\r\n * @export\r\n */\r\nexport class AppComponent implements OnInit {\r\n  title = 'VTR';\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(\r\n    private store$: Store,\r\n    private homeproducts: HomeproductsService\r\n  ) {}\r\n\r\n  /**\r\n   * @function\r\n   */\r\n  ngOnInit() {\r\n    this.store$.dispatch(new LoadHomeproducts());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 239,
                    "end": 249,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 239,
                        "end": 240,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 240,
                        "end": 249,
                        "flags": 0,
                        "escapedText": "component"
                    }
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store"
                    },
                    {
                        "name": "homeproducts",
                        "type": "HomeproductsService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "homeproducts",
                        "type": "HomeproductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>\r\n  {{ title }}\r\n</h1>\r\n<lla-homeproducts></lla-homeproducts>\r\n"
        },
        {
            "name": "ButtonsComponent",
            "id": "component-ButtonsComponent-b4d97eae0d5b79bb453a0ebcec822a13",
            "file": "stories/buttons/buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-buttons",
            "styleUrls": [
                "./buttons.scss"
            ],
            "styles": [],
            "template": "<div    class=\"template-fluid\"\n    [ngClass]=\"{\n      'dark-theme': backgroundColor === '#000000',\n      'light-theme': backgroundColor === '#ffffff'\n    }\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    <button\n      mat-raised-button\n      [disabled]=\"isdisabled\"\n      [ngClass]=\"[\n        extraClass ? extraClass : '',\n        noExist ? 'btn-no-exist' : '',\n        isPrimary ? 'button--primary' : '',\n        isSecondary ? 'button--secondary' : '',\n        isLink ? 'button--link' : ''\n      ]\"\n    >\n      <span\n        class=\"icon-left\"\n        *ngIf=\"\n          extraClass == 'btn-large-icon btn-left' ||\n          extraClass == 'btn-small-icon btn-left'\n        \"\n      >\n        <svg\n          width=\"20\"\n          height=\"20\"\n          viewBox=\"0 0 20 20\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\n            stroke=\"white\"\n            stroke-width=\"1.47126\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n        </svg>\n      </span>\n      <span\n        *ngIf=\"\n          extraClass !== 'btn-icon large-icon' &&\n          extraClass !== 'btn-icon small-icon'\n        \"\n      >\n        {{ text }}\n      </span>\n      <span\n        *ngIf=\"\n          extraClass == 'btn-large-icon btn-right' ||\n          extraClass == 'btn-small-icon btn-right' ||\n          extraClass == 'btn-icon large-icon' ||\n          extraClass == 'btn-icon small-icon'\n        \"\n        [ngClass]=\"[\n          extraClass == 'btn-large-icon btn-right'\n            ? 'icon-right'\n            : extraClass == 'btn-small-icon btn-right'\n            ? 'icon-right'\n            : '',\n          extraClass == 'btn-icon large-icon'\n            ? 'icon'\n            : extraClass == 'btn-icon small-icon'\n            ? 'icon'\n            : ''\n        ]\"\n      >\n        <svg\n          width=\"20\"\n          height=\"20\"\n          viewBox=\"0 0 20 20\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\n            stroke=\"white\"\n            stroke-width=\"1.47126\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          /></svg\n      ></span>\n    </button>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "bgcolor",
                    "defaultValue": "'white'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "extraClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "ghostText",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "isLink",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "isPrimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "isSecondary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "noExist",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-buttons',\r\n  template: `<div\r\n    class=\"template-fluid\"\r\n    [ngClass]=\"{\r\n      'dark-theme': backgroundColor === '#000000',\r\n      'light-theme': backgroundColor === '#ffffff'\r\n    }\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <button\r\n      mat-raised-button\r\n      [disabled]=\"isdisabled\"\r\n      [ngClass]=\"[\r\n        extraClass ? extraClass : '',\r\n        noExist ? 'btn-no-exist' : '',\r\n        isPrimary ? 'button--primary' : '',\r\n        isSecondary ? 'button--secondary' : '',\r\n        isLink ? 'button--link' : ''\r\n      ]\"\r\n    >\r\n      <span\r\n        class=\"icon-left\"\r\n        *ngIf=\"\r\n          extraClass == 'btn-large-icon btn-left' ||\r\n          extraClass == 'btn-small-icon btn-left'\r\n        \"\r\n      >\r\n        <svg\r\n          width=\"20\"\r\n          height=\"20\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            fill-rule=\"evenodd\"\r\n            clip-rule=\"evenodd\"\r\n            d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1.47126\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n          />\r\n        </svg>\r\n      </span>\r\n      <span\r\n        *ngIf=\"\r\n          extraClass !== 'btn-icon large-icon' &&\r\n          extraClass !== 'btn-icon small-icon'\r\n        \"\r\n      >\r\n        {{ text }}\r\n      </span>\r\n      <span\r\n        *ngIf=\"\r\n          extraClass == 'btn-large-icon btn-right' ||\r\n          extraClass == 'btn-small-icon btn-right' ||\r\n          extraClass == 'btn-icon large-icon' ||\r\n          extraClass == 'btn-icon small-icon'\r\n        \"\r\n        [ngClass]=\"[\r\n          extraClass == 'btn-large-icon btn-right'\r\n            ? 'icon-right'\r\n            : extraClass == 'btn-small-icon btn-right'\r\n            ? 'icon-right'\r\n            : '',\r\n          extraClass == 'btn-icon large-icon'\r\n            ? 'icon'\r\n            : extraClass == 'btn-icon small-icon'\r\n            ? 'icon'\r\n            : ''\r\n        ]\"\r\n      >\r\n        <svg\r\n          width=\"20\"\r\n          height=\"20\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            fill-rule=\"evenodd\"\r\n            clip-rule=\"evenodd\"\r\n            d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1.47126\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n          /></svg\r\n      ></span>\r\n    </button>\r\n  </div> `,\r\n  styleUrls: ['./buttons.scss'],\r\n})\r\nexport default class ButtonsComponent {\r\n  extraClass = '';\r\n  text = '';\r\n  backgroundColor = '';\r\n  isdisabled = false;\r\n  isSecondary = false;\r\n  isPrimary = false;\r\n  isLink = false;\r\n  ghostText = false;\r\n  bgcolor = 'white';\r\n  noExist = false;\r\n  TextColor = '';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./buttons.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "checkboxComponent",
            "id": "component-checkboxComponent-b83c227ec9e6d4d6174c1fbb87b8f689",
            "file": "stories/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-toggle",
            "styleUrls": [
                "./checkbox.scss"
            ],
            "styles": [],
            "template": "<div    class=\"template-fluid\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    <div *ngIf=\"isprimary\">\n      <div\n        [ngClass]=\"[\n          backgroundColor == 'rgba(255,255,255,1)'\n            ? 'primary-checkbox'\n            : 'dark-checkbox'\n        ]\"\n      >\n        <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\n        <mat-checkbox *ngIf=\"!group\" [checked]=\"isChecked\" [disabled]=\"disabled\"\n          ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\n            >Checkbox label</span\n          ></mat-checkbox\n        >\n      </div>\n    </div>\n    <div *ngIf=\"iserror\" class=\"error-checkbox\">\n      <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\n      <mat-checkbox [checked]=\"isChecked\"\n        ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\n          >Checkbox label</span\n        ></mat-checkbox\n      >\n    </div>\n    <div *ngIf=\"isgroup\" class=\"primary-checkbox\">\n      <p class=\"group-checkbox-caption checkbox-caption\" *ngIf=\"caption\">Group caption</p>\n      <mat-list>\n        <mat-list-item *ngFor=\"let item of values; let i = index\">\n          <label class=\"checkbox-container\">\n            <input type=\"checkbox\" class=\"new-checkbox\" />\n            <span class=\"checkmark\"\n              ><span *ngIf=\"label\" class=\"mat-checkbox-label label-addon\">{{\n                item.name\n              }}</span></span\n            ></label\n          >\n        </mat-list-item>\n      </mat-list>\n    </div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "checkValue",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, NgModule } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'storybook-toggle',\r\n  template: `<div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <div *ngIf=\"isprimary\">\r\n      <div\r\n        [ngClass]=\"[\r\n          backgroundColor == 'rgba(255,255,255,1)'\r\n            ? 'primary-checkbox'\r\n            : 'dark-checkbox'\r\n        ]\"\r\n      >\r\n        <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n        <mat-checkbox *ngIf=\"!group\" [checked]=\"isChecked\" [disabled]=\"disabled\"\r\n          ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n            >Checkbox label</span\r\n          ></mat-checkbox\r\n        >\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"iserror\" class=\"error-checkbox\">\r\n      <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n      <mat-checkbox [checked]=\"isChecked\"\r\n        ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n          >Checkbox label</span\r\n        ></mat-checkbox\r\n      >\r\n    </div>\r\n    <div *ngIf=\"isgroup\" class=\"primary-checkbox\">\r\n      <p class=\"group-checkbox-caption checkbox-caption\" *ngIf=\"caption\">Group caption</p>\r\n      <mat-list>\r\n        <mat-list-item *ngFor=\"let item of values; let i = index\">\r\n          <label class=\"checkbox-container\">\r\n            <input type=\"checkbox\" class=\"new-checkbox\" />\r\n            <span class=\"checkmark\"\r\n              ><span *ngIf=\"label\" class=\"mat-checkbox-label label-addon\">{{\r\n                item.name\r\n              }}</span></span\r\n            ></label\r\n          >\r\n        </mat-list-item>\r\n      </mat-list>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./checkbox.scss'],\r\n})\r\nexport default class checkboxComponent {\r\n  isChecked = false;\r\n  disabled = false;\r\n\r\n  checkValue(e) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "colorsComponent",
            "id": "component-colorsComponent-0a3b57bf5a09f7da78d7a7495e9f443e",
            "file": "stories/colors/colors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-colors",
            "styleUrls": [
                "./color.scss"
            ],
            "styles": [],
            "template": "<article    class=\"template-fluid\"\n    [ngStyle]=\"{\n      'text-align': textAlignment,\n      'background-color': backgroundColor,\n      color: TextColor\n    }\"\n    [ngClass]=\"[btnCategory ? btnCategory : ' ']\"\n  >\n    <section *ngIf=\"getTheme == 'VTR'\">\n      <section *ngIf=\"btnCategory == 'primary'\">\n        <div *ngFor=\"let primaryColor of bgcolorVTRPrimary\">\n          <h4>{{ primaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + primaryColor\"\n                *ngFor=\"let op of opacity\"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div [ngClass]=\"'colorInnerBox ' + op\"></div>\n                <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + primaryColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section *ngIf=\"btnCategory == 'secondary'\">\n        <div *ngFor=\"let secondaryColor of bgcolorVTRSecondary\">\n          <h4>{{ secondaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\n                *ngFor=\"\n                  let op of [\n                    'C50',\n                    'C100',\n                    'C200',\n                    'C300',\n                    'C400',\n                    'C500',\n                    'C600',\n                    'C700',\n                    'C800'\n                  ]\n                \"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div\n                  mat-raised-button\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\n                  [ngClass]=\"'colorInnerBox ' + op\"\n                ></div>\n                <div\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section *ngIf=\"btnCategory == 'teritary'\">\n        <div *ngFor=\"let teritaryColor of bgcolorVTRTeritary\" class=\"colorSet\">\n          <h4>{{ teritaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\n                *ngFor=\"let op of opacity\"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div\n                  mat-raised-button\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\n                  [ngClass]=\"'colorInnerBox ' + op\"\n                ></div>\n                <div\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section *ngIf=\"btnCategory == 'neutral'\">\n        <div *ngFor=\"let neutralColor of bgcolorNeutral\">\n          <h4>{{ neutralColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + neutralColor\"\n                *ngFor=\"\n                  let op of [\n                    'C50',\n                    'C100',\n                    'C200',\n                    'C300',\n                    'C400',\n                    'C500',\n                    'C600',\n                    'C700',\n                    'C800'\n                  ]\n                \"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div\n                  mat-raised-button\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\n                  [ngClass]=\"'colorInnerBox ' + op\"\n                ></div>\n                <div\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + neutralColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </section>\n    <section *ngIf=\"getTheme == 'Flow'\">\n      <section *ngIf=\"btnCategory == 'primary'\">\n        <div *ngFor=\"let primaryColor of bgcolorFlowPrimary\">\n          <h4>{{ primaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + primaryColor\"\n                *ngFor=\"let op of opacity\"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div [ngClass]=\"'colorInnerBox ' + op\"></div>\n                <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + primaryColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section *ngIf=\"btnCategory == 'secondary'\">\n        <div *ngFor=\"let secondaryColor of bgcolorFlowSecondary\">\n          <h4>{{ secondaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\n                *ngFor=\"\n                  let op of [\n                    'C50',\n                    'C100',\n                    'C200',\n                    'C300',\n                    'C400',\n                    'C500',\n                    'C600',\n                    'C700',\n                    'C800'\n                  ]\n                \"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div\n                  mat-raised-button\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\n                  [ngClass]=\"'colorInnerBox ' + op\"\n                ></div>\n                <div\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section *ngIf=\"btnCategory == 'teritary'\">\n        <div *ngFor=\"let teritaryColor of bgcolorFlowTeritary\" class=\"colorSet\">\n          <h4>{{ teritaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\n                *ngFor=\"let op of opacity\"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div\n                  mat-raised-button\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\n                  [ngClass]=\"'colorInnerBox ' + op\"\n                ></div>\n                <div\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section *ngIf=\"btnCategory == 'neutral'\">\n        <div *ngFor=\"let neutralColor of bgcolorNeutral\">\n          <h4>{{ secondaryColor | uppercase }}</h4>\n          <div class=\"colorPallett\">\n            <div class=\"colorSet\">\n              <p><strong>Colors</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + neutralColor\"\n                *ngFor=\"\n                  let op of [\n                    'C50',\n                    'C100',\n                    'C200',\n                    'C300',\n                    'C400',\n                    'C500',\n                    'C600',\n                    'C700',\n                    'C800'\n                  ]\n                \"\n              >\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\n                <div\n                  mat-raised-button\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\n                  [ngClass]=\"'colorInnerBox ' + op\"\n                ></div>\n                <div\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n            <div class=\"transparencySet\">\n              <p><strong>Transparency</strong></p>\n              <div\n                [ngClass]=\"'colorBox  ' + neutralColor\"\n                *ngFor=\"let op of transparency\"\n              >\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\n                <div\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 388
                },
                {
                    "name": "bgcolorFlowPrimary",
                    "defaultValue": "['blue']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 384
                },
                {
                    "name": "bgcolorFlowSecondary",
                    "defaultValue": "['green', 'violent']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 385
                },
                {
                    "name": "bgcolorFlowTeritary",
                    "defaultValue": "['red', 'orange']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 386
                },
                {
                    "name": "bgcolorNeutral",
                    "defaultValue": "['grey']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 387
                },
                {
                    "name": "bgcolorVTRPrimary",
                    "defaultValue": "['pink']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 381
                },
                {
                    "name": "bgcolorVTRSecondary",
                    "defaultValue": "['blue', 'violent', 'lightBlue', 'paleCyan']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 382
                },
                {
                    "name": "bgcolorVTRTeritary",
                    "defaultValue": "['green', 'paleBlue', 'orange', 'red']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 383
                },
                {
                    "name": "btnCategory",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 379
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 380
                },
                {
                    "name": "opacity",
                    "defaultValue": "[\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 366
                },
                {
                    "name": "textAlignment",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 365
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 389
                },
                {
                    "name": "transparency",
                    "defaultValue": "['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 378
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  MatGridListModule,\r\n  MatGridTile,\r\n  MatGridList,\r\n} from '@angular/material/grid-list';\r\n\r\n@Component({\r\n  selector: 'storybook-colors',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'text-align': textAlignment,\r\n      'background-color': backgroundColor,\r\n      color: TextColor\r\n    }\"\r\n    [ngClass]=\"[btnCategory ? btnCategory : ' ']\"\r\n  >\r\n    <section *ngIf=\"getTheme == 'VTR'\">\r\n      <section *ngIf=\"btnCategory == 'primary'\">\r\n        <div *ngFor=\"let primaryColor of bgcolorVTRPrimary\">\r\n          <h4>{{ primaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + primaryColor\"\r\n                *ngFor=\"let op of opacity\"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n                <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + primaryColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section *ngIf=\"btnCategory == 'secondary'\">\r\n        <div *ngFor=\"let secondaryColor of bgcolorVTRSecondary\">\r\n          <h4>{{ secondaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n                *ngFor=\"\r\n                  let op of [\r\n                    'C50',\r\n                    'C100',\r\n                    'C200',\r\n                    'C300',\r\n                    'C400',\r\n                    'C500',\r\n                    'C600',\r\n                    'C700',\r\n                    'C800'\r\n                  ]\r\n                \"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div\r\n                  mat-raised-button\r\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                  [ngClass]=\"'colorInnerBox ' + op\"\r\n                ></div>\r\n                <div\r\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section *ngIf=\"btnCategory == 'teritary'\">\r\n        <div *ngFor=\"let teritaryColor of bgcolorVTRTeritary\" class=\"colorSet\">\r\n          <h4>{{ teritaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n                *ngFor=\"let op of opacity\"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div\r\n                  mat-raised-button\r\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                  [ngClass]=\"'colorInnerBox ' + op\"\r\n                ></div>\r\n                <div\r\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section *ngIf=\"btnCategory == 'neutral'\">\r\n        <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n          <h4>{{ neutralColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + neutralColor\"\r\n                *ngFor=\"\r\n                  let op of [\r\n                    'C50',\r\n                    'C100',\r\n                    'C200',\r\n                    'C300',\r\n                    'C400',\r\n                    'C500',\r\n                    'C600',\r\n                    'C700',\r\n                    'C800'\r\n                  ]\r\n                \"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div\r\n                  mat-raised-button\r\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                  [ngClass]=\"'colorInnerBox ' + op\"\r\n                ></div>\r\n                <div\r\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + neutralColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </section>\r\n    <section *ngIf=\"getTheme == 'Flow'\">\r\n      <section *ngIf=\"btnCategory == 'primary'\">\r\n        <div *ngFor=\"let primaryColor of bgcolorFlowPrimary\">\r\n          <h4>{{ primaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + primaryColor\"\r\n                *ngFor=\"let op of opacity\"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n                <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + primaryColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section *ngIf=\"btnCategory == 'secondary'\">\r\n        <div *ngFor=\"let secondaryColor of bgcolorFlowSecondary\">\r\n          <h4>{{ secondaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n                *ngFor=\"\r\n                  let op of [\r\n                    'C50',\r\n                    'C100',\r\n                    'C200',\r\n                    'C300',\r\n                    'C400',\r\n                    'C500',\r\n                    'C600',\r\n                    'C700',\r\n                    'C800'\r\n                  ]\r\n                \"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div\r\n                  mat-raised-button\r\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                  [ngClass]=\"'colorInnerBox ' + op\"\r\n                ></div>\r\n                <div\r\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section *ngIf=\"btnCategory == 'teritary'\">\r\n        <div *ngFor=\"let teritaryColor of bgcolorFlowTeritary\" class=\"colorSet\">\r\n          <h4>{{ teritaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n                *ngFor=\"let op of opacity\"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div\r\n                  mat-raised-button\r\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                  [ngClass]=\"'colorInnerBox ' + op\"\r\n                ></div>\r\n                <div\r\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section *ngIf=\"btnCategory == 'neutral'\">\r\n        <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n          <h4>{{ secondaryColor | uppercase }}</h4>\r\n          <div class=\"colorPallett\">\r\n            <div class=\"colorSet\">\r\n              <p><strong>Colors</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + neutralColor\"\r\n                *ngFor=\"\r\n                  let op of [\r\n                    'C50',\r\n                    'C100',\r\n                    'C200',\r\n                    'C300',\r\n                    'C400',\r\n                    'C500',\r\n                    'C600',\r\n                    'C700',\r\n                    'C800'\r\n                  ]\r\n                \"\r\n              >\r\n                <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n                <div\r\n                  mat-raised-button\r\n                  [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                  [ngClass]=\"'colorInnerBox ' + op\"\r\n                ></div>\r\n                <div\r\n                  [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                  [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"transparencySet\">\r\n              <p><strong>Transparency</strong></p>\r\n              <div\r\n                [ngClass]=\"'colorBox  ' + neutralColor\"\r\n                *ngFor=\"let op of transparency\"\r\n              >\r\n                <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n                <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n                <div\r\n                  [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./color.scss'],\r\n})\r\nexport default class colorsComponent implements OnInit {\r\n  textAlignment = 'left';\r\n  opacity = [\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ];\r\n  transparency = ['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48'];\r\n  btnCategory: 'primary';\r\n  getTheme = 'VTR';\r\n  bgcolorVTRPrimary = ['pink'];\r\n  bgcolorVTRSecondary = ['blue', 'violent', 'lightBlue', 'paleCyan'];\r\n  bgcolorVTRTeritary = ['green', 'paleBlue', 'orange', 'red'];\r\n  bgcolorFlowPrimary = ['blue'];\r\n  bgcolorFlowSecondary = ['green', 'violent'];\r\n  bgcolorFlowTeritary = ['red', 'orange'];\r\n  bgcolorNeutral = ['grey'];\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".colorPallett {\r\n  margin: 50px;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n.colorSet {\r\n  flex-basis: 45%;\r\n}\r\n.colorBox {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n}\r\n.colorInnerBox {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 10px;\r\n  margin: 10px;\r\n}\r\n\r\n.outlinedBox {\r\n  background-color: transparent !important;\r\n}\r\n.codeValue {\r\n  width: 10%;\r\n}\r\n.codeTransparent {\r\n  width: 20%;\r\n}\r\n",
                    "styleUrl": "./color.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-a5ea7eb89cdb7ef5b6e7371e722706ba",
            "file": "stories/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-grid",
            "styleUrls": [
                "./grid.scss"
            ],
            "styles": [],
            "template": "  <div\n    [ngClass]=\"{\n      'dark-theme': backgroundColor === '#000000',\n      'light-theme': backgroundColor === '#ffffff'\n    }\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n  <div class=\"grid-wrapper\">\n    <mat-grid-list #grid [cols]=\"cols\" rowHeight=\"1:50\" [gutterSize]=\"gutter\">\n      <mat-grid-tile>1</mat-grid-tile>\n      <mat-grid-tile>2</mat-grid-tile>\n      <mat-grid-tile>3</mat-grid-tile>\n      <mat-grid-tile>4</mat-grid-tile>\n      <mat-grid-tile>5</mat-grid-tile>\n      <mat-grid-tile>6</mat-grid-tile>\n      <mat-grid-tile>7</mat-grid-tile>\n      <mat-grid-tile>8</mat-grid-tile>\n      <mat-grid-tile>9</mat-grid-tile>\n      <mat-grid-tile>10</mat-grid-tile>\n      <mat-grid-tile>11</mat-grid-tile>\n      <mat-grid-tile>12</mat-grid-tile>\n    </mat-grid-list>\n</div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "gridByBreakpoint",
                    "defaultValue": "{\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml :12,\r\n    xs: 4,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "gutter",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "gutterSize",
                    "defaultValue": "{\r\n      sm : 16,\r\n      lg : 24\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'storybook-grid',\r\n  template: `\r\n  <div\r\n    [ngClass]=\"{\r\n      'dark-theme': backgroundColor === '#000000',\r\n      'light-theme': backgroundColor === '#ffffff'\r\n    }\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n  <div class=\"grid-wrapper\">\r\n    <mat-grid-list #grid [cols]=\"cols\" rowHeight=\"1:50\" [gutterSize]=\"gutter\">\r\n      <mat-grid-tile>1</mat-grid-tile>\r\n      <mat-grid-tile>2</mat-grid-tile>\r\n      <mat-grid-tile>3</mat-grid-tile>\r\n      <mat-grid-tile>4</mat-grid-tile>\r\n      <mat-grid-tile>5</mat-grid-tile>\r\n      <mat-grid-tile>6</mat-grid-tile>\r\n      <mat-grid-tile>7</mat-grid-tile>\r\n      <mat-grid-tile>8</mat-grid-tile>\r\n      <mat-grid-tile>9</mat-grid-tile>\r\n      <mat-grid-tile>10</mat-grid-tile>\r\n      <mat-grid-tile>11</mat-grid-tile>\r\n      <mat-grid-tile>12</mat-grid-tile>\r\n    </mat-grid-list>\r\n</div>\r\n  </div> `,\r\n  styleUrls: ['./grid.scss'],\r\n})\r\nexport default class GridComponent {\r\n  cols: number;\r\n  gutter : number;\r\n\r\n  gridByBreakpoint = {\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml :12,\r\n    xs: 4,\r\n  };\r\n  gutterSize = {\r\n      sm : 16,\r\n      lg : 24\r\n  }\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n            \r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.cols = this.gridByBreakpoint.xs;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.cols = this.gridByBreakpoint.sm;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.cols = this.gridByBreakpoint.md;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.cols = this.gridByBreakpoint.lg;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.cols = this.gridByBreakpoint.xl;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.cols = this.gridByBreakpoint.sml;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./grid.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HomeproductsComponent",
            "id": "component-HomeproductsComponent-d6aae80d2b7295790fbe04be1dd2be47",
            "file": "apps/vtr/src/app/components/homeproducts/homeproducts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-homeproducts",
            "styleUrls": [
                "./homeproducts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./homeproducts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data$",
                    "defaultValue": "null",
                    "type": "Observable<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "description": "",
                    "jsdoctags": []
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'lla-homeproducts',\r\n  templateUrl: './homeproducts.component.html',\r\n  styleUrls: ['./homeproducts.component.scss'],\r\n})\r\n/**\r\n * @class\r\n */\r\nexport class HomeproductsComponent implements OnInit {\r\n  data$: Observable<any> | null = null;\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(private store$: Store) {}\r\n  /**\r\n   * @function\r\n   */\r\n  ngOnInit(): void {\r\n    this.data$ = this.store$.pipe(\r\n      select((state: any) => {\r\n        return {\r\n          homeproducts: state.homeproducts && state.homeproducts.list,\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./homeproducts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"data$ | async as data\">\r\n  <lla-list [items]=\"data.homeproducts\"></lla-list>\r\n</div>\r\n"
        },
        {
            "name": "IconsComponent",
            "id": "component-IconsComponent-6af3fabc036f121ccfb083c6535a8353",
            "file": "stories/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-icons",
            "styleUrls": [
                "./icons.scss"
            ],
            "styles": [],
            "template": "<div\n   class=\"template-fluid\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n<div class=\"wrapper-icon\"\n[ngClass]=\"[ fontSize?  fontSize : '' ]\" >\n<span\n[ngClass]=\"[ iconClass?  iconClass : '' ]\"\n[ngStyle]=\"{ 'color' :  fontColor }\"\n>\n</span>\n<span  *ngIf=\"label\" class=\"description-icon\" [ngStyle]=\"{ 'color' :  fontColor }\">Test</span>\n</div>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fontSize",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "iconClass",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-icons',\r\n  template: `\r\n  <div\r\n     class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n  <div class=\"wrapper-icon\"\r\n  [ngClass]=\"[ fontSize?  fontSize : '' ]\" >\r\n  <span \r\n  [ngClass]=\"[ iconClass?  iconClass : '' ]\" \r\n  [ngStyle]=\"{ 'color' :  fontColor }\"\r\n  >\r\n  </span>\r\n  <span  *ngIf=\"label\" class=\"description-icon\" [ngStyle]=\"{ 'color' :  fontColor }\">Test</span>\r\n  </div>\r\n  </div> `,\r\n  styleUrls: ['./icons.scss'],\r\n})\r\nexport class IconsComponent {\r\n  fontSize = \"\";\r\n  iconClass= \"\";\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icons.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "inputsComponent",
            "id": "component-inputsComponent-7141671aa21cec570192959049a376cf",
            "file": "stories/inputs/inputs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-inputs",
            "styleUrls": [
                "./inputs.scss"
            ],
            "styles": [],
            "template": "<article    class=\"template-fluid\"\n    [ngStyle]=\"{\n      'background-color': backgroundColor,\n      color: TextColor\n    }\"\n  >\n    <div *ngIf=\"types != 'inputWithCode'\">\n      <p\n        [ngClass]=\"[\n          status ? status : '',\n          size ? size : '',\n          styles ? styles : ''\n        ]\"\n      >\n        <label class=\"inputLabel\"\n          ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\n        ><br />\n        <mat-form-field appearance=\"standard\">\n          <div *ngIf=\"types == 'inputWithPassword'\">\n            <div class=\"icon-holder\">\n              <span class=\"icon-lock\"></span>\n            </div>\n          </div>\n\n          <div class=\"symbols\" *ngIf=\"types == 'Price'\">\n            <span *ngIf=\"position == 'prefix'\">{{ affixTypes }}</span>\n          </div>\n\n          <div *ngIf=\"types == 'inputWithPassword'\">\n            <input\n              matInput\n              [type]=\"hide ? 'password' : 'text'\"\n              [disabled]=\"status == 'disabled' ? true : false\"\n              [readonly]=\"status == 'readOnly' ? true : false\"\n              placeholder=\"Placeholder\"\n              class=\"inputBox\"\n            />\n          </div>\n          <div *ngIf=\"types == 'inputWithPassword'\">\n            <div\n              class=\"icon-holder\"\n              (click)=\"hide = !hide\"\n              [attr.aria-label]=\"'Hide password'\"\n              [attr.aria-pressed]=\"hide\"\n            >\n              <span class=\"display-icon\"\n              [ngClass]=\" hide ? 'icon-eye-ouline' : 'icon-eye-off-ouline' \"\n              [ngStyle]=\"{ 'font-size': '30px' }\" ></span>\n            </div>\n          </div>\n          <div\n            *ngIf=\"types != 'inputWithTextarea' && types != 'inputWithPassword'\"\n          >\n            <input\n              matInput *ngIf=\"types == 'defaultInputs'\"\n              [disabled]=\"status == 'disabled' ? true : false\"\n              [readonly]=\"status == 'readOnly' ? true : false\"\n              placeholder=\"Placeholder\"\n              class=\"inputBox\"\n            />\n            <div *ngIf=\"types == 'Price'\" class=\"no-spinner\">\n            <input\n              matInput *ngIf=\"types == 'Price'\" type=\"number\"\n              [disabled]=\"status == 'disabled' ? true : false\"\n              [readonly]=\"status == 'readOnly' ? true : false\"\n              placeholder=\"Placeholder\"\n              class=\"inputBox\"\n            /></div>\n          </div>\n\n          <div *ngIf=\"types == 'inputWithTextarea'\">\n            <textarea\n              matInput\n              class=\"inputTextArea\"\n              placeholder=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply.\"\n            ></textarea>\n          </div>\n\n          <mat-hint\n            *ngIf=\"\n              status == 'default' ||\n              status == 'active' ||\n              status == 'disabled' ||\n              status == 'readOnly'\n            \"\n            >Assistive Text</mat-hint\n          >\n          <mat-hint\n            *ngIf=\"status == 'success'\"\n            class=\"toaster success-background\"\n            >Success Text</mat-hint\n          >\n          <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\n            >Error Text</mat-hint\n          >\n          <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\n\n          <div class=\"icon-holder\" *ngIf=\"types == 'defaultInputs'\">\n            <span [ngClass]=\"[iconType ? iconType : '']\"></span>\n          </div>\n\n          <!-- <div *ngIf=\"types == 'defaultInputs'\">\n            <div class=\"icon-holder active\">\n              <span class=\"icon-eye\"></span>\n            </div>\n          </div> -->\n\n          <div class=\"symbols\" *ngIf=\"types == 'Price'\">\n            <span *ngIf=\"position == 'suffix'\">{{ affixTypes }}</span>\n          </div>\n        </mat-form-field>\n      </p>\n    </div>\n\n    <div *ngIf=\"types == 'inputWithCode'\">\n      <div\n        class=\"inputCode\"\n        [ngClass]=\"[\n          status ? status : '',\n          size ? size : '',\n          styles ? styles : ''\n        ]\"\n      >\n        <label class=\"inputLabel\"\n          ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\n        ><br />\n        <div class=\"inputCodeBox\">\n          <div class=\"mat-form-field-infix\" *ngFor=\"let item of [].constructor(count);let i=index\">\n            <input\n              (keyup)=\"onInputEntry($event,i)\"\n              class=\"inputcode\"\n              [ngClass]=\"styles ? styles : ''\"\n              matInput\n              [type]=\"(active[i] && active[i]=='true') ? 'password' : 'text'\"\n              maxlength=\"1\"\n            />\n          </div>\n        </div>\n        <mat-hint\n          *ngIf=\"\n            status == 'default' ||\n            status == 'active' ||\n            status == 'disabled' ||\n            status == 'readOnly'\n          \"\n          >Assistive Text</mat-hint\n        >\n        <mat-hint *ngIf=\"status == 'success'\" class=\"toaster success-background\"\n          >Success Text</mat-hint\n        >\n        <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\n          >Error Text</mat-hint\n        >\n        <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\n      </div>\n    </div>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "affixTypes",
                    "defaultValue": "'$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "count",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "iconType",
                    "defaultValue": "'iconcopy'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "styles",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "types",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 174
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "onInputEntry",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "i",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-inputs',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor,\r\n      color: TextColor\r\n    }\"\r\n  >\r\n    <div *ngIf=\"types != 'inputWithCode'\">\r\n      <p\r\n        [ngClass]=\"[\r\n          status ? status : '',\r\n          size ? size : '',\r\n          styles ? styles : ''\r\n        ]\"\r\n      >\r\n        <label class=\"inputLabel\"\r\n          ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\r\n        ><br />\r\n        <mat-form-field appearance=\"standard\">\r\n          <div *ngIf=\"types == 'inputWithPassword'\">\r\n            <div class=\"icon-holder\">\r\n              <span class=\"icon-lock\"></span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"symbols\" *ngIf=\"types == 'Price'\">\r\n            <span *ngIf=\"position == 'prefix'\">{{ affixTypes }}</span>\r\n          </div>\r\n\r\n          <div *ngIf=\"types == 'inputWithPassword'\">\r\n            <input\r\n              matInput\r\n              [type]=\"hide ? 'password' : 'text'\"\r\n              [disabled]=\"status == 'disabled' ? true : false\"\r\n              [readonly]=\"status == 'readOnly' ? true : false\"\r\n              placeholder=\"Placeholder\"\r\n              class=\"inputBox\"\r\n            />\r\n          </div>\r\n          <div *ngIf=\"types == 'inputWithPassword'\">\r\n            <div\r\n              class=\"icon-holder\"\r\n              (click)=\"hide = !hide\"\r\n              [attr.aria-label]=\"'Hide password'\"\r\n              [attr.aria-pressed]=\"hide\"\r\n            >\r\n              <span class=\"display-icon\" \r\n              [ngClass]=\" hide ? 'icon-eye-ouline' : 'icon-eye-off-ouline' \"\r\n              [ngStyle]=\"{ 'font-size': '30px' }\" ></span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            *ngIf=\"types != 'inputWithTextarea' && types != 'inputWithPassword'\"\r\n          >\r\n            <input\r\n              matInput *ngIf=\"types == 'defaultInputs'\"\r\n              [disabled]=\"status == 'disabled' ? true : false\"\r\n              [readonly]=\"status == 'readOnly' ? true : false\"\r\n              placeholder=\"Placeholder\"\r\n              class=\"inputBox\"\r\n            />\r\n            <div *ngIf=\"types == 'Price'\" class=\"no-spinner\">\r\n            <input\r\n              matInput *ngIf=\"types == 'Price'\" type=\"number\"\r\n              [disabled]=\"status == 'disabled' ? true : false\"\r\n              [readonly]=\"status == 'readOnly' ? true : false\"\r\n              placeholder=\"Placeholder\"\r\n              class=\"inputBox\"\r\n            /></div>\r\n          </div>\r\n\r\n          <div *ngIf=\"types == 'inputWithTextarea'\">\r\n            <textarea\r\n              matInput\r\n              class=\"inputTextArea\"\r\n              placeholder=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply.\"\r\n            ></textarea>\r\n          </div>\r\n\r\n          <mat-hint\r\n            *ngIf=\"\r\n              status == 'default' ||\r\n              status == 'active' ||\r\n              status == 'disabled' ||\r\n              status == 'readOnly'\r\n            \"\r\n            >Assistive Text</mat-hint\r\n          >\r\n          <mat-hint\r\n            *ngIf=\"status == 'success'\"\r\n            class=\"toaster success-background\"\r\n            >Success Text</mat-hint\r\n          >\r\n          <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\r\n            >Error Text</mat-hint\r\n          >\r\n          <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\r\n\r\n          <div class=\"icon-holder\" *ngIf=\"types == 'defaultInputs'\">\r\n            <span [ngClass]=\"[iconType ? iconType : '']\"></span>\r\n          </div>\r\n\r\n          <!-- <div *ngIf=\"types == 'defaultInputs'\">\r\n            <div class=\"icon-holder active\">\r\n              <span class=\"icon-eye\"></span>\r\n            </div>\r\n          </div> -->\r\n\r\n          <div class=\"symbols\" *ngIf=\"types == 'Price'\">\r\n            <span *ngIf=\"position == 'suffix'\">{{ affixTypes }}</span>\r\n          </div>\r\n        </mat-form-field>\r\n      </p>\r\n    </div>\r\n\r\n    <div *ngIf=\"types == 'inputWithCode'\">\r\n      <div\r\n        class=\"inputCode\"\r\n        [ngClass]=\"[\r\n          status ? status : '',\r\n          size ? size : '',\r\n          styles ? styles : ''\r\n        ]\"\r\n      >\r\n        <label class=\"inputLabel\"\r\n          ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\r\n        ><br />\r\n        <div class=\"inputCodeBox\">\r\n          <div class=\"mat-form-field-infix\" *ngFor=\"let item of [].constructor(count);let i=index\">\r\n            <input\r\n              (keyup)=\"onInputEntry($event,i)\"\r\n              class=\"inputcode\"\r\n              [ngClass]=\"styles ? styles : ''\"\r\n              matInput\r\n              [type]=\"(active[i] && active[i]=='true') ? 'password' : 'text'\"\r\n              maxlength=\"1\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <mat-hint\r\n          *ngIf=\"\r\n            status == 'default' ||\r\n            status == 'active' ||\r\n            status == 'disabled' ||\r\n            status == 'readOnly'\r\n          \"\r\n          >Assistive Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'success'\" class=\"toaster success-background\"\r\n          >Success Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\r\n          >Error Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\r\n      </div>\r\n    </div>\r\n  </article>`,\r\n  styleUrls: ['./inputs.scss'],\r\n})\r\nexport default class inputsComponent implements OnInit {\r\n  count = 4;\r\n  active = [];\r\n  getTheme = 'VTR';\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  status = '';\r\n  size = '';\r\n  styles = '';\r\n  types = '';\r\n  hide = true;\r\n  isdisabled = false;\r\n  iconType = 'iconcopy';\r\n  affixTypes = '$';\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n  onInputEntry(event, i) {\r\n    if(event.code == \"Backspace\" || event.code == \"Delete\"){\r\n      this.active[i] = \"false\";\r\n    } else if((event.code).slice(0,5) == \"Digit\" || (event.code).slice(0,3) == \"Key\"){\r\n      setTimeout(()=>{ this.active[i] = \"true\" }, 300);\r\n      let j = i+1;\r\n      if(j < this.count){\r\n        document.getElementById('mat-input-'+j.toString()).focus(); \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n3",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./inputs.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-d6c4b776807f0e6f9ec8ff0b0a6efe9d",
            "file": "libs/ui/src/lib/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n})\r\nexport class ListComponent implements OnInit {\r\n  @Input() items: any;\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  constructor() {}\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-tab-group animationDuration=\"0ms\">\r\n  <mat-tab *ngFor=\"let item of items\" label=\"{{ item.title }}\">\r\n    <label [innerHtml]=\"item.description\" class=\"error-color\"></label>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n"
        },
        {
            "name": "radiobuttonComponent",
            "id": "component-radiobuttonComponent-13c9c990b79eaf4c3aa059ad9d407ff2",
            "file": "stories/radiobutton/radiobutton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-radiobutton",
            "styleUrls": [
                "./radiobutton.scss"
            ],
            "styles": [],
            "template": "<div    class=\"template-fluid\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    <div\n      *ngIf=\"isprimary\"\n      [ngClass]=\"[\n        backgroundColor == 'rgba(255,255,255,1)'\n          ? 'primary-radiobutton'\n          : 'dark-radiobutton'\n      ]\"\n    >\n      <p class=\"caption\" *ngIf=\"caption\">caption</p>\n      <mat-radio-group>\n        <mat-radio-button value=\"1\" [disabled]=\"disabled\">\n          <span *ngIf=\"label\">Radio label</span> </mat-radio-button\n        ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span\n        ><br *ngIf=\"!horizontal\" /><br *ngIf=\"!horizontal\" />\n        <mat-radio-button value=\"2\" [disabled]=\"disabled\">\n          <span *ngIf=\"label\">Radio label</span>\n        </mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <div class=\"error-radiobutton\" *ngIf=\"iserror\">\n      <p class=\"caption\" *ngIf=\"caption\">caption</p>\n      <mat-radio-group>\n        <mat-radio-button value=\"1\" [disabled]=\"disabled\">\n          <span *ngIf=\"label\">Radio label</span> </mat-radio-button\n        ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span\n        ><br *ngIf=\"!horizontal\" /><br *ngIf=\"!horizontal\" />\n        <mat-radio-button value=\"2\" [disabled]=\"disabled\">\n          <span *ngIf=\"label\">Radio label</span>\n        </mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <div *ngIf=\"isgroup\" class=\"primary-radiobutton\">\n      <p class=\"caption\" *ngIf=\"caption\">caption</p>\n           <mat-list>\n              <mat-list-item *ngFor=\"let item of values; let i = index\">\n                <label class=\"radio-container\">\n                  <span  *ngIf=\"label\">{{item.name}}</span>\n                  <input type=\"radio\" name=\"radio\">\n                  <span class=\"radio-checkmark\"></span>\n                </label>\n              </mat-list-item>\n          </mat-list>\n   </div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, NgModule } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-radiobutton',\r\n  template: `<div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <div\r\n      *ngIf=\"isprimary\"\r\n      [ngClass]=\"[\r\n        backgroundColor == 'rgba(255,255,255,1)'\r\n          ? 'primary-radiobutton'\r\n          : 'dark-radiobutton'\r\n      ]\"\r\n    >\r\n      <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n      <mat-radio-group>\r\n        <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n          <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n        ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span\r\n        ><br *ngIf=\"!horizontal\" /><br *ngIf=\"!horizontal\" />\r\n        <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n          <span *ngIf=\"label\">Radio label</span>\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n    <div class=\"error-radiobutton\" *ngIf=\"iserror\">\r\n      <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n      <mat-radio-group>\r\n        <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n          <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n        ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span\r\n        ><br *ngIf=\"!horizontal\" /><br *ngIf=\"!horizontal\" />\r\n        <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n          <span *ngIf=\"label\">Radio label</span>\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n    <div *ngIf=\"isgroup\" class=\"primary-radiobutton\">\r\n      <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n           <mat-list>\r\n              <mat-list-item *ngFor=\"let item of values; let i = index\">\r\n                <label class=\"radio-container\"> \r\n                  <span  *ngIf=\"label\">{{item.name}}</span>\r\n                  <input type=\"radio\" name=\"radio\">\r\n                  <span class=\"radio-checkmark\"></span>\r\n                </label>\r\n              </mat-list-item>\r\n          </mat-list>\r\n   </div>\r\n  </div>`,\r\n  styleUrls: ['./radiobutton.scss'],\r\n})\r\nexport default class radiobuttonComponent {\r\n  isChecked = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radiobutton.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "toggleComponent",
            "id": "component-toggleComponent-8aa1970f0199b8551fb454a2ebbaaf4a",
            "file": "stories/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-toggle",
            "styleUrls": [
                "./toggle.scss"
            ],
            "styles": [],
            "template": "<div    class=\"template-fluid\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    <div\n      *ngIf=\"isprimary\"\n      class=\"lla-toggle\"\n      [ngClass]=\"[\n        backgroundColor == 'rgba(255,255,255,1)'\n          ? 'primary-toggle'\n          : 'dark-toggle'\n      ]\"\n    >\n      <p class=\"toggle-caption\" *ngIf=\"caption\">Caption</p>\n      <mat-slide-toggle [(ngModel)]=\"isChecked\" [disabled]=\"isdisabled\"\n        ><p *ngIf=\"label && !isChecked\">Off</p>\n        <p *ngIf=\"label && isChecked\">On</p></mat-slide-toggle\n      >\n    </div>\n    <div *ngIf=\"iserror\" class=\"lla-toggle error-toggle\">\n      <p class=\"toggle-caption\" *ngIf=\"caption\">Caption</p>\n      <mat-slide-toggle [(ngModel)]=\"isChecked\" [disabled]=\"isdisabled\"\n        ><p *ngIf=\"label && !isChecked\">Off</p>\n        <p *ngIf=\"label && isChecked\">On</p></mat-slide-toggle\n      >\n    </div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, NgModule } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-toggle',\r\n  template: `<div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <div\r\n      *ngIf=\"isprimary\"\r\n      class=\"lla-toggle\"\r\n      [ngClass]=\"[\r\n        backgroundColor == 'rgba(255,255,255,1)'\r\n          ? 'primary-toggle'\r\n          : 'dark-toggle'\r\n      ]\"\r\n    >\r\n      <p class=\"toggle-caption\" *ngIf=\"caption\">Caption</p>\r\n      <mat-slide-toggle [(ngModel)]=\"isChecked\" [disabled]=\"isdisabled\"\r\n        ><p *ngIf=\"label && !isChecked\">Off</p>\r\n        <p *ngIf=\"label && isChecked\">On</p></mat-slide-toggle\r\n      >\r\n    </div>\r\n    <div *ngIf=\"iserror\" class=\"lla-toggle error-toggle\">\r\n      <p class=\"toggle-caption\" *ngIf=\"caption\">Caption</p>\r\n      <mat-slide-toggle [(ngModel)]=\"isChecked\" [disabled]=\"isdisabled\"\r\n        ><p *ngIf=\"label && !isChecked\">Off</p>\r\n        <p *ngIf=\"label && isChecked\">On</p></mat-slide-toggle\r\n      >\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./toggle.scss'],\r\n})\r\nexport default class toggleComponent {\r\n  isChecked = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "typographyComponent",
            "id": "component-typographyComponent-713c421ee9ffb0af3cb23127342b9dc1",
            "file": "stories/typography/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-typography",
            "styleUrls": [
                "./typography.scss"
            ],
            "styles": [],
            "template": "<article    class=\"template-fluid\"\n    [ngStyle]=\"{\n      'text-align': textAlignment,\n      'background-color': backgroundColor,\n      color: TextColor\n    }\"\n    [ngClass]=\"[\n      backgroundColor == 'rgba(0,0,0,1)' ? 'dark-theme' : '',\n      backgroundColor == 'rgba(255,255,255,1)' ? 'light-theme' : '',\n      backgroundColor == 'rgba(0,0,0,1)' ? 'bigsizes-dark' : '',\n      backgroundColor == 'rgba(255,255,255,1)' ? 'bigsizes-light' : ''\n    ]\"\n  >\n    <section *ngIf=\"isbody\">\n      <div\n        [ngClass]=\"{\n          'primary-color': colorVariant === 'primary',\n          'success-color': colorVariant === 'success',\n          'info-color': colorVariant === 'info',\n          'warning-color': colorVariant === 'warning',\n          'disabled-color': colorVariant === 'disabled',\n          'error-color': colorVariant === 'error'\n        }\"\n      >\n        <h1 class=\"b1\">B1 Body</h1>\n        <h2 class=\"b2\">B2 Body</h2>\n        <h3 class=\"b3\">B3 Body</h3>\n        <h4 class=\"b4\">B4 Body</h4>\n      </div>\n    </section>\n    <section *ngIf=\"isheading\">\n      <div\n        [ngClass]=\"{\n          'primary-color': colorVariant === 'primary',\n          'success-color': colorVariant === 'success',\n          'info-color': colorVariant === 'info',\n          'warning-color': colorVariant === 'warning',\n          'disabled-color': colorVariant === 'disabled',\n          'error-color': colorVariant === 'error'\n        }\"\n      >\n        <h1 class=\"h1\">H1 Ultra Large</h1>\n        <h2 class=\"h2\">H2 Extra Large</h2>\n        <h3 class=\"h3\">H3 Large</h3>\n        <h4 class=\"h4\">H4 Medium</h4>\n        <h5 class=\"h5\">H5 Regular</h5>\n        <h6 class=\"h6\">H6 Small</h6>\n      </div>\n    </section>\n    <section *ngIf=\"issubline\">\n      <div\n        [ngClass]=\"{\n          'primary-color': colorVariant === 'primary',\n          'success-color': colorVariant === 'success',\n          'info-color': colorVariant === 'info',\n          'warning-color': colorVariant === 'warning',\n          'disabled-color': colorVariant === 'disabled',\n          'error-color': colorVariant === 'error'\n        }\"\n      >\n        <h1 class=\"s1\">S1 SUBLINE</h1>\n        <h2 class=\"s2\">S2 SUBLINE</h2>\n        <h3 class=\"s3\">S3 SUBLINE</h3>\n        <h4 class=\"s4\">S4 Subline</h4>\n      </div>\n    </section>\n    <section *ngIf=\"istextcombinations\">\n      <p\n        class=\"storybook-title\"\n        [ngClass]=\"{\n          'storybook-title-large': textcombo === 'large',\n          'storybook-title-medium': textcombo === 'medium',\n          'storybook-title-small': textcombo === 'small',\n          'storybook-title-regular': textcombo === 'regular'\n        }\"\n      >\n        Meet the small wild cats of Bhutan\n      </p>\n      <p\n        class=\"storybook-body\"\n        [ngClass]=\"{\n          'storybook-body-large': textcombo === 'large',\n          'storybook-body-medium': textcombo === 'medium',\n          'storybook-body-small': textcombo === 'small',\n          'storybook-body-regular': textcombo === 'regular'\n        }\"\n      >\n        Did you know that Bhutan is a hotspot of wild cat diversity? It is home\n        to 11 species of wild cats which is about 30% of all wild cat species\n        found in the world. Considering that Bhutan only covers .03% of the\n        earth’s surface, that number seems even more amazing.\n      </p>\n    </section>\n    <section *ngIf=\"isbutton\">\n      <div\n        [ngClass]=\"{\n          'primary-color': button === 'primary',\n          'disabled-color': button === 'disabled'\n        }\"\n      >\n        <p class=\"typography-button-large\">Button</p>\n        <p class=\"typography-button-medium\">Button</p>\n        <p class=\"typography-button-small\">Button</p>\n      </div>\n    </section>\n    <section *ngIf=\"isbigsizes\">\n      <p class=\"storybook-bigsizes\">H7 Big <br />Daddy</p>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'#fff'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "isbody",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "isheading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "issubline",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "textAlignment",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "TextColor",
                    "defaultValue": "'#000'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, NgZone } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-typography',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'text-align': textAlignment,\r\n      'background-color': backgroundColor,\r\n      color: TextColor\r\n    }\"\r\n    [ngClass]=\"[\r\n      backgroundColor == 'rgba(0,0,0,1)' ? 'dark-theme' : '',\r\n      backgroundColor == 'rgba(255,255,255,1)' ? 'light-theme' : '',\r\n      backgroundColor == 'rgba(0,0,0,1)' ? 'bigsizes-dark' : '',\r\n      backgroundColor == 'rgba(255,255,255,1)' ? 'bigsizes-light' : ''\r\n    ]\"\r\n  >\r\n    <section *ngIf=\"isbody\">\r\n      <div\r\n        [ngClass]=\"{\r\n          'primary-color': colorVariant === 'primary',\r\n          'success-color': colorVariant === 'success',\r\n          'info-color': colorVariant === 'info',\r\n          'warning-color': colorVariant === 'warning',\r\n          'disabled-color': colorVariant === 'disabled',\r\n          'error-color': colorVariant === 'error'\r\n        }\"\r\n      >\r\n        <h1 class=\"b1\">B1 Body</h1>\r\n        <h2 class=\"b2\">B2 Body</h2>\r\n        <h3 class=\"b3\">B3 Body</h3>\r\n        <h4 class=\"b4\">B4 Body</h4>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"isheading\">\r\n      <div\r\n        [ngClass]=\"{\r\n          'primary-color': colorVariant === 'primary',\r\n          'success-color': colorVariant === 'success',\r\n          'info-color': colorVariant === 'info',\r\n          'warning-color': colorVariant === 'warning',\r\n          'disabled-color': colorVariant === 'disabled',\r\n          'error-color': colorVariant === 'error'\r\n        }\"\r\n      >\r\n        <h1 class=\"h1\">H1 Ultra Large</h1>\r\n        <h2 class=\"h2\">H2 Extra Large</h2>\r\n        <h3 class=\"h3\">H3 Large</h3>\r\n        <h4 class=\"h4\">H4 Medium</h4>\r\n        <h5 class=\"h5\">H5 Regular</h5>\r\n        <h6 class=\"h6\">H6 Small</h6>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"issubline\">\r\n      <div\r\n        [ngClass]=\"{\r\n          'primary-color': colorVariant === 'primary',\r\n          'success-color': colorVariant === 'success',\r\n          'info-color': colorVariant === 'info',\r\n          'warning-color': colorVariant === 'warning',\r\n          'disabled-color': colorVariant === 'disabled',\r\n          'error-color': colorVariant === 'error'\r\n        }\"\r\n      >\r\n        <h1 class=\"s1\">S1 SUBLINE</h1>\r\n        <h2 class=\"s2\">S2 SUBLINE</h2>\r\n        <h3 class=\"s3\">S3 SUBLINE</h3>\r\n        <h4 class=\"s4\">S4 Subline</h4>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"istextcombinations\">\r\n      <p\r\n        class=\"storybook-title\"\r\n        [ngClass]=\"{\r\n          'storybook-title-large': textcombo === 'large',\r\n          'storybook-title-medium': textcombo === 'medium',\r\n          'storybook-title-small': textcombo === 'small',\r\n          'storybook-title-regular': textcombo === 'regular'\r\n        }\"\r\n      >\r\n        Meet the small wild cats of Bhutan\r\n      </p>\r\n      <p\r\n        class=\"storybook-body\"\r\n        [ngClass]=\"{\r\n          'storybook-body-large': textcombo === 'large',\r\n          'storybook-body-medium': textcombo === 'medium',\r\n          'storybook-body-small': textcombo === 'small',\r\n          'storybook-body-regular': textcombo === 'regular'\r\n        }\"\r\n      >\r\n        Did you know that Bhutan is a hotspot of wild cat diversity? It is home\r\n        to 11 species of wild cats which is about 30% of all wild cat species\r\n        found in the world. Considering that Bhutan only covers .03% of the\r\n        earth’s surface, that number seems even more amazing.\r\n      </p>\r\n    </section>\r\n    <section *ngIf=\"isbutton\">\r\n      <div\r\n        [ngClass]=\"{\r\n          'primary-color': button === 'primary',\r\n          'disabled-color': button === 'disabled'\r\n        }\"\r\n      >\r\n        <p class=\"typography-button-large\">Button</p>\r\n        <p class=\"typography-button-medium\">Button</p>\r\n        <p class=\"typography-button-small\">Button</p>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"isbigsizes\">\r\n      <p class=\"storybook-bigsizes\">H7 Big <br />Daddy</p>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./typography.scss'],\r\n})\r\nexport default class typographyComponent {\r\n  textAlignment: 'left';\r\n  isbody: boolean = false;\r\n  isheading: boolean = false;\r\n  issubline: boolean = false;\r\n  backgroundColor = '#fff';\r\n  TextColor = '#000';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./typography.scss"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeproductsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "affixTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  none: '',\r\n  dollar: '$',\r\n  // star: '*',\r\n  percentage: '%',\r\n  hash: '#',\r\n  gb: 'Gb.',\r\n  gct: 'GCT',\r\n  mins: 'mins',\r\n}"
            },
            {
                "name": "alignOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  left: 'left',\r\n  right: 'right',\r\n  center: 'center',\r\n}"
            },
            {
                "name": "applicationStateFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr/src/app/reducers/index.ts",
                "type": "string",
                "defaultValue": "'applicationState'"
            },
            {
                "name": "bgerrorOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n    'normal' : 'bg-error',\r\n    'Opacity 40%' : 'bg-error-4',\r\n    'Opacity 24%' :  'bg-error-24'\r\n}"
            },
            {
                "name": "bginfoOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n    'normal' : 'bg-info',\r\n    'Opacity 40%' : 'bg-info-4',\r\n    'Opacity 24%' :  'bg-info-24'\r\n}"
            },
            {
                "name": "bgsuccessOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n    'normal' : 'bg-success',\r\n    'Opacity 40%' : 'bg-success-4',\r\n    'Opacity 24%' :  'bg-success-24'\r\n}"
            },
            {
                "name": "bgwarningOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n    'normal' : 'bg-warning',\r\n    'Opacity 40%' : 'bg-warning-4',\r\n    'Opacity 24%' :  'bg-warning-24'\r\n}"
            },
            {
                "name": "Bigsizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadat: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    isbigsizes: true,\r\n  },\r\n})"
            },
            {
                "name": "body",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    colorVariant: select('Color', colorVariants, 'default', 'Colors'),\r\n    isbody: true,\r\n  },\r\n})"
            },
            {
                "name": "btnOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/buttons.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  'Large button': 'btn-large',\r\n  'Small button': 'btn-small',\r\n  'large with right icon': 'btn-large-icon btn-right',\r\n  'large with left icon': 'btn-large-icon btn-left',\r\n  'Small with right icon': 'btn-small-icon btn-right',\r\n  'Small with left icon': 'btn-small-icon btn-left',\r\n  'large with only icon': 'btn-icon large-icon',\r\n  'Small with only icon': 'btn-icon small-icon',\r\n}"
            },
            {
                "name": "button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    button: select('Button', buttonOptions, 'default', 'Colors'),\r\n    isbutton: true,\r\n  },\r\n})"
            },
            {
                "name": "buttonOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  default: 'default',\r\n  primary: 'primary',\r\n  disabled: 'disabled',\r\n}"
            },
            {
                "name": "category",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/colors/colors.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  primary: 'primary',\r\n  secondary: 'secondary',\r\n  teritary: 'teritary',\r\n  neutral: 'neutral',\r\n}"
            },
            {
                "name": "checkbox_list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    name: 'Group Checkbox Label 1',\r\n    checked: false,\r\n    id: 1,\r\n  },\r\n  {\r\n    name: 'Group Checkbox Label 2',\r\n    checked: false,\r\n    id: 2,\r\n  },\r\n  {\r\n    name: 'Group Checkbox Label 3',\r\n    checked: false,\r\n    id: 3,\r\n  },\r\n]"
            },
            {
                "name": "Code",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    isinputcode: true,\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'States'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    types: 'inputWithCode',\r\n  },\r\n})"
            },
            {
                "name": "colorOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/colors/colors.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  white: 'white',\r\n  black: 'black',\r\n}"
            },
            {
                "name": "colorOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  white: 'white',\r\n  black: 'black',\r\n}"
            },
            {
                "name": "colorVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  default: 'default',\r\n  primary: 'primary',\r\n  success: 'success',\r\n  info: 'info',\r\n  disabled: 'disabled',\r\n  error: 'error',\r\n}"
            },
            {
                "name": "customViewports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/viewports.ts",
                "type": "object",
                "defaultValue": "{\r\n  mobile1: {\r\n    name: '320px',\r\n    styles: {\r\n      width: '320px',\r\n      height: '963px',\r\n    },\r\n  },\r\n  mobile2: {\r\n    name: '360px',\r\n    styles: {\r\n      width: '360px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  mobile3: {\r\n    name: '400px',\r\n    styles: {\r\n      width: '400px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  mobile4: {\r\n    name: '480px',\r\n    styles: {\r\n      width: '480px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet1: {\r\n    name: '600px',\r\n    styles: {\r\n      width: '600px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet2: {\r\n    name: '720px',\r\n    styles: {\r\n      width: '720px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet3: {\r\n    name: '840px',\r\n    styles: {\r\n      width: '840px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet4: {\r\n    name: '960px',\r\n    styles: {\r\n      width: '960px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop1: {\r\n    name: '1024px',\r\n    styles: {\r\n      width: '1024px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop2: {\r\n    name: '1280px',\r\n    styles: {\r\n      width: '1280px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop3: {\r\n    name: '1440px',\r\n    styles: {\r\n      width: '1440px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop4: {\r\n    name: '1600px',\r\n    styles: {\r\n      width: '1600px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop5: {\r\n    name: '1920px',\r\n    styles: {\r\n      width: '1920px',\r\n      height: '801px',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: Alert,\r\n    props: {\r\n      title : text(\"title\", \"Error\"),\r\n      content : text(\"content\", \"Try to refresh\"),\r\n      backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n      category : select('Category', bgerrorOption, 'bg-error'),\r\n      fullwidth: boolean('Full width', false)\r\n    },\r\n  })"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: checkbox,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    iserror: true,\r\n  },\r\n})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: radiobutton,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    horizontal: boolean('horizontal', false),\r\n    iserror: true,\r\n  },\r\n})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: toggle,\r\n  props: {\r\n    isdisabled: boolean('isdisabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    iserror: true,\r\n  },\r\n})"
            },
            {
                "name": "getGreeting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "() => cy.get('h1')"
            },
            {
                "name": "grid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/grid/grid.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: Grid,\r\n  props: {\r\n  },\r\n})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: checkbox,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    add: button(label, handler),\r\n    remove: button('Remove Checkbox', handler1),\r\n    isgroup: true,\r\n    values: checkbox_list,\r\n  },\r\n})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: radiobutton,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    isgroup: true,\r\n    values: radioBtn_list,\r\n    add: button(label, handler),\r\n    remove: button('Remove Radio Button', handler1),\r\n  },\r\n})"
            },
            {
                "name": "handler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => add(checkbox_list)"
            },
            {
                "name": "handler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "() => add(radioBtn_list)"
            },
            {
                "name": "handler1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => remove(checkbox_list)"
            },
            {
                "name": "handler1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "() => remove(radioBtn_list)"
            },
            {
                "name": "heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    colorVariant: select('Color', colorVariants, 'default', 'Colors'),\r\n    isheading: true,\r\n  },\r\n})"
            },
            {
                "name": "icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/icons/icons.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: IconsComponent,\r\n  props: {\r\n    iconClass: text(\"Icon Class\", \"icon-battery-charging\"),\r\n    fontSize : select(\"Font Size\" , iconSize, \"md-icon\"),\r\n    fontColor: color('Font Color', '#000000'),\r\n    label : boolean(\"Label\",false),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n  },\r\n})"
            },
            {
                "name": "iconSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/icons/icons.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  'Extra Small' :  'xs-icon',\r\n  'Small' : 'sm-icon',\r\n  'Medium' : `md-icon`,\r\n  'Large' : 'lg-icon',\r\n  'Extra Large' : 'xl-icon'\r\n}"
            },
            {
                "name": "iconTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  none: 'none',\r\n  iconcopy: 'icon-copy',\r\n  iconLock: 'icon-lock',\r\n  iconSearch: 'icon-search',\r\n  iconEye: 'icon-eye',\r\n}"
            },
            {
                "name": "info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: Alert,\r\n    props: {\r\n      title : text(\"title\", \"Information\"),\r\n      content : text(\"content\", \"Remember pay your check\"),\r\n      backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n      category : select('Category', bginfoOption, 'bg-info'),\r\n      fullwidth: boolean('Full width', false)\r\n    },\r\n  })"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                "type": "IHomeproduct",
                "defaultValue": "{\r\n  list: [],\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "Inputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'Status'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    iconType: select('iconType', iconTypes, 'none', 'Icon'),\r\n    types: 'defaultInputs',\r\n  },\r\n})"
            },
            {
                "name": "inputStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  default: 'default',\r\n  active: 'active',\r\n  readOnly: 'readOnly',\r\n  success: 'success',\r\n  disabled: 'disabled',\r\n  required: 'required',\r\n  error: 'error',\r\n}"
            },
            {
                "name": "label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "string",
                "defaultValue": "'Add Checkbox'"
            },
            {
                "name": "label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "string",
                "defaultValue": "'Add Radio Button'"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/buttons.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n  component: Buttons,\r\n  props: {\r\n    text: text('text', 'Main CTA'),\r\n    extraClass: select('Styles', linkOptions, 'btn-large'),\r\n    isdisabled: boolean('isdisabled', false),\r\n    noExist: boolean('Animation No Exist', false),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n    isLink: true,\r\n  },\r\n})"
            },
            {
                "name": "linkOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/buttons.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  'Large button': 'btn-large',\r\n  'Small button': 'btn-small',\r\n  'large with right icon': 'btn-large-icon btn-right',\r\n  'large with left icon': 'btn-large-icon btn-left',\r\n  'Small with right icon': 'btn-small-icon btn-right',\r\n  'Small with left icon': 'btn-small-icon btn-left',\r\n}"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr/src/app/reducers/index.ts",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production\r\n  ? []\r\n  : []"
            },
            {
                "name": "neutral",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'neutral', 'GROUP-ID3'),\r\n  },\r\n})"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    ispassword: true,\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'States'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    types: 'inputWithPassword',\r\n  },\r\n})"
            },
            {
                "name": "position",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  prefix: 'prefix',\r\n  suffix: 'suffix',\r\n}"
            },
            {
                "name": "Price",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'Status'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    affixTypes: select('affixTypes', affixTypes, '', 'Affix'),\r\n    position: select('position', position, 'prefix', 'Position'),\r\n    types: 'Price'\r\n  }\r\n})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/buttons.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n  component: Buttons,\r\n  props: {\r\n    text: text('text', 'Main CTA'),\r\n    extraClass: select('Styles', btnOptions, 'btn-large'),\r\n    isdisabled: boolean('isdisabled', false),\r\n    noExist: boolean('Animation No Exist', false),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n    isPrimary: true,\r\n  },\r\n})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'primary', 'GROUP-ID3'),\r\n  },\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: checkbox,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    backgroundColor: color(\r\n      'backgroundColor',\r\n      'rgba(255,255,255,1)',\r\n      'Background'\r\n    ),\r\n    isprimary: true,\r\n  },\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: radiobutton,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    horizontal: boolean('horizontal', false),\r\n    isprimary: true,\r\n    backgroundColor: color(\r\n        'backgroundColor',\r\n        'rgba(255,255,255,1)',\r\n        'Background'\r\n      ),\r\n  },\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: toggle,\r\n  props: {\r\n    isdisabled: boolean('isdisabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    isprimary: true,\r\n    backgroundColor: color(\r\n        'backgroundColor',\r\n        'rgba(255,255,255,1)',\r\n        'Background'\r\n      ),\r\n  },\r\n})"
            },
            {
                "name": "radioBtn_list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    name: 'Radio Button 1',\r\n    id: 1,\r\n  },\r\n  {\r\n    name: 'Radio Button 2',\r\n    id: 2,\r\n  },\r\n  {\r\n    name: 'Radio Button 3',\r\n    id: 3,\r\n  },\r\n]"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/vtr/src/app/reducers/index.ts",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\r\n  homeproducts: HomeproductReducer,\r\n}"
            },
            {
                "name": "secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/buttons.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n  component: Buttons,\r\n  props: {\r\n    text: text('text', 'Main CTA'),\r\n    extraClass: select('Styles', btnOptions, 'btn-large'),\r\n    isdisabled: boolean('isdisabled', false),\r\n    noExist: boolean('Animation No Exist', false),\r\n    backgroundColor: color('backgroundColor', '#fff', 'Background'),\r\n    isSecondary: true,\r\n  },\r\n})"
            },
            {
                "name": "secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'secondary', 'GROUP-ID3'),\r\n  },\r\n})"
            },
            {
                "name": "size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  small: 'small',\r\n  large: 'large',\r\n}"
            },
            {
                "name": "styles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  fillInput: 'fillInput',\r\n  outlineInput: 'outlineInput',\r\n}"
            },
            {
                "name": "subline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    colorVariant: select('Color', colorVariants, 'default', 'Colors'),\r\n    issubline: true,\r\n  },\r\n})"
            },
            {
                "name": "success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: Alert,\r\n  props: {\r\n    title : text(\"title\", \"Success!\"),\r\n    content : text(\"content\", \"Everything good\"),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n    category : select('Category', bgsuccessOption, 'bg-success'),\r\n    fullwidth: boolean('Full width', false)\r\n  },\r\n})"
            },
            {
                "name": "support",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'teritary', 'GROUP-ID3'),\r\n  },\r\n})"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'Status'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    types: 'inputWithTextarea',\r\n  },\r\n})"
            },
            {
                "name": "textcombinations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    textcombo: select(\r\n      'TextCombo',\r\n      textComboOptions,\r\n      'large',\r\n      'Text Combinations'\r\n    ),\r\n    istextcombinations: true,\r\n  },\r\n})"
            },
            {
                "name": "textComboOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "type": "object",
                "defaultValue": "{\r\n  large: 'large',\r\n  medium: 'medium',\r\n  small: 'small',\r\n  regular: 'regular',\r\n}"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: Alert,\r\n    props: {\r\n      title : text(\"title\", \"Warning!\"),\r\n      content : text(\"content\", \"Something wrong\"),\r\n      backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n      category : select('Category', bgwarningOption, 'bg-warning'),\r\n      fullwidth: boolean('Full width', false)\r\n    },\r\n  })"
            }
        ],
        "functions": [
            {
                "name": "add",
                "file": "stories/checkbox/checkbox.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "checkbox_list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "checkbox_list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "add",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "radioBtn_list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "radioBtn_list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HomeproductReducer",
                "file": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "tagName": {
                            "pos": 313,
                            "end": 319,
                            "flags": 0,
                            "escapedText": "return"
                        },
                        "comment": "",
                        "returnType": "string"
                    }
                ]
            },
            {
                "name": "remove",
                "file": "stories/checkbox/checkbox.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "checkbox_list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "checkbox_list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "remove",
                "file": "stories/radiobutton/radiobutton.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "radioBtn_list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "radioBtn_list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "HomeproductActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadHomeproducts | LoadHomeproductsSuccess | LoadHomeproductsFailure",
                "file": "apps/vtr/src/app/actions/homeproduct.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "HomeproductActionTypes",
                "childs": [
                    {
                        "name": "LoadHomeproducts",
                        "value": "[Homeproduct] Load Homeproducts"
                    },
                    {
                        "name": "LoadHomeproductsSuccess",
                        "value": "[Homeproduct] Load Homeproducts Success"
                    },
                    {
                        "name": "LoadHomeproductsFailure",
                        "value": "[Homeproduct] Load Homeproducts Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "apps/vtr/src/app/actions/homeproduct.actions.ts"
            }
        ],
        "groupedVariables": {
            "stories/inputs/inputs.stories.ts": [
                {
                    "name": "affixTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  none: '',\r\n  dollar: '$',\r\n  // star: '*',\r\n  percentage: '%',\r\n  hash: '#',\r\n  gb: 'Gb.',\r\n  gct: 'GCT',\r\n  mins: 'mins',\r\n}"
                },
                {
                    "name": "Code",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    isinputcode: true,\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'States'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    types: 'inputWithCode',\r\n  },\r\n})"
                },
                {
                    "name": "iconTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  none: 'none',\r\n  iconcopy: 'icon-copy',\r\n  iconLock: 'icon-lock',\r\n  iconSearch: 'icon-search',\r\n  iconEye: 'icon-eye',\r\n}"
                },
                {
                    "name": "Inputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'Status'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    iconType: select('iconType', iconTypes, 'none', 'Icon'),\r\n    types: 'defaultInputs',\r\n  },\r\n})"
                },
                {
                    "name": "inputStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  default: 'default',\r\n  active: 'active',\r\n  readOnly: 'readOnly',\r\n  success: 'success',\r\n  disabled: 'disabled',\r\n  required: 'required',\r\n  error: 'error',\r\n}"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    ispassword: true,\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'States'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    types: 'inputWithPassword',\r\n  },\r\n})"
                },
                {
                    "name": "position",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  prefix: 'prefix',\r\n  suffix: 'suffix',\r\n}"
                },
                {
                    "name": "Price",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'Status'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    affixTypes: select('affixTypes', affixTypes, '', 'Affix'),\r\n    position: select('position', position, 'prefix', 'Position'),\r\n    types: 'Price'\r\n  }\r\n})"
                },
                {
                    "name": "size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  small: 'small',\r\n  large: 'large',\r\n}"
                },
                {
                    "name": "styles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  fillInput: 'fillInput',\r\n  outlineInput: 'outlineInput',\r\n}"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: inputsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    status: select('status', inputStatus, 'default', 'Status'),\r\n    size: select('size', size, 'large', 'Size'),\r\n    styles: select('styles', styles, 'fillInput', 'Styles'),\r\n    types: 'inputWithTextarea',\r\n  },\r\n})"
                }
            ],
            "stories/typography/typography.stories.ts": [
                {
                    "name": "alignOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  left: 'left',\r\n  right: 'right',\r\n  center: 'center',\r\n}"
                },
                {
                    "name": "Bigsizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadat: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    isbigsizes: true,\r\n  },\r\n})"
                },
                {
                    "name": "body",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    colorVariant: select('Color', colorVariants, 'default', 'Colors'),\r\n    isbody: true,\r\n  },\r\n})"
                },
                {
                    "name": "button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    button: select('Button', buttonOptions, 'default', 'Colors'),\r\n    isbutton: true,\r\n  },\r\n})"
                },
                {
                    "name": "buttonOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  default: 'default',\r\n  primary: 'primary',\r\n  disabled: 'disabled',\r\n}"
                },
                {
                    "name": "colorOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  white: 'white',\r\n  black: 'black',\r\n}"
                },
                {
                    "name": "colorVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  default: 'default',\r\n  primary: 'primary',\r\n  success: 'success',\r\n  info: 'info',\r\n  disabled: 'disabled',\r\n  error: 'error',\r\n}"
                },
                {
                    "name": "heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    colorVariant: select('Color', colorVariants, 'default', 'Colors'),\r\n    isheading: true,\r\n  },\r\n})"
                },
                {
                    "name": "subline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    colorVariant: select('Color', colorVariants, 'default', 'Colors'),\r\n    issubline: true,\r\n  },\r\n})"
                },
                {
                    "name": "textcombinations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [],\r\n  },\r\n  component: typographyComponent,\r\n  props: {\r\n    textAlignment: select('Alignment', alignOptions, 'left', 'Alignment'),\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    textcombo: select(\r\n      'TextCombo',\r\n      textComboOptions,\r\n      'large',\r\n      'Text Combinations'\r\n    ),\r\n    istextcombinations: true,\r\n  },\r\n})"
                },
                {
                    "name": "textComboOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  large: 'large',\r\n  medium: 'medium',\r\n  small: 'small',\r\n  regular: 'regular',\r\n}"
                }
            ],
            "apps/vtr/src/app/reducers/index.ts": [
                {
                    "name": "applicationStateFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr/src/app/reducers/index.ts",
                    "type": "string",
                    "defaultValue": "'applicationState'"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr/src/app/reducers/index.ts",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production\r\n  ? []\r\n  : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr/src/app/reducers/index.ts",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\r\n  homeproducts: HomeproductReducer,\r\n}"
                }
            ],
            "stories/alert/alert.stories.ts": [
                {
                    "name": "bgerrorOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'normal' : 'bg-error',\r\n    'Opacity 40%' : 'bg-error-4',\r\n    'Opacity 24%' :  'bg-error-24'\r\n}"
                },
                {
                    "name": "bginfoOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'normal' : 'bg-info',\r\n    'Opacity 40%' : 'bg-info-4',\r\n    'Opacity 24%' :  'bg-info-24'\r\n}"
                },
                {
                    "name": "bgsuccessOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'normal' : 'bg-success',\r\n    'Opacity 40%' : 'bg-success-4',\r\n    'Opacity 24%' :  'bg-success-24'\r\n}"
                },
                {
                    "name": "bgwarningOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'normal' : 'bg-warning',\r\n    'Opacity 40%' : 'bg-warning-4',\r\n    'Opacity 24%' :  'bg-warning-24'\r\n}"
                },
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: Alert,\r\n    props: {\r\n      title : text(\"title\", \"Error\"),\r\n      content : text(\"content\", \"Try to refresh\"),\r\n      backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n      category : select('Category', bgerrorOption, 'bg-error'),\r\n      fullwidth: boolean('Full width', false)\r\n    },\r\n  })"
                },
                {
                    "name": "info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: Alert,\r\n    props: {\r\n      title : text(\"title\", \"Information\"),\r\n      content : text(\"content\", \"Remember pay your check\"),\r\n      backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n      category : select('Category', bginfoOption, 'bg-info'),\r\n      fullwidth: boolean('Full width', false)\r\n    },\r\n  })"
                },
                {
                    "name": "success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: Alert,\r\n  props: {\r\n    title : text(\"title\", \"Success!\"),\r\n    content : text(\"content\", \"Everything good\"),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n    category : select('Category', bgsuccessOption, 'bg-success'),\r\n    fullwidth: boolean('Full width', false)\r\n  },\r\n})"
                },
                {
                    "name": "warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: Alert,\r\n    props: {\r\n      title : text(\"title\", \"Warning!\"),\r\n      content : text(\"content\", \"Something wrong\"),\r\n      backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n      category : select('Category', bgwarningOption, 'bg-warning'),\r\n      fullwidth: boolean('Full width', false)\r\n    },\r\n  })"
                }
            ],
            "stories/buttons/buttons.stories.ts": [
                {
                    "name": "btnOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/buttons.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'Large button': 'btn-large',\r\n  'Small button': 'btn-small',\r\n  'large with right icon': 'btn-large-icon btn-right',\r\n  'large with left icon': 'btn-large-icon btn-left',\r\n  'Small with right icon': 'btn-small-icon btn-right',\r\n  'Small with left icon': 'btn-small-icon btn-left',\r\n  'large with only icon': 'btn-icon large-icon',\r\n  'Small with only icon': 'btn-icon small-icon',\r\n}"
                },
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/buttons.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n  component: Buttons,\r\n  props: {\r\n    text: text('text', 'Main CTA'),\r\n    extraClass: select('Styles', linkOptions, 'btn-large'),\r\n    isdisabled: boolean('isdisabled', false),\r\n    noExist: boolean('Animation No Exist', false),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n    isLink: true,\r\n  },\r\n})"
                },
                {
                    "name": "linkOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/buttons.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'Large button': 'btn-large',\r\n  'Small button': 'btn-small',\r\n  'large with right icon': 'btn-large-icon btn-right',\r\n  'large with left icon': 'btn-large-icon btn-left',\r\n  'Small with right icon': 'btn-small-icon btn-right',\r\n  'Small with left icon': 'btn-small-icon btn-left',\r\n}"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/buttons.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n  component: Buttons,\r\n  props: {\r\n    text: text('text', 'Main CTA'),\r\n    extraClass: select('Styles', btnOptions, 'btn-large'),\r\n    isdisabled: boolean('isdisabled', false),\r\n    noExist: boolean('Animation No Exist', false),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n    isPrimary: true,\r\n  },\r\n})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/buttons.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n  component: Buttons,\r\n  props: {\r\n    text: text('text', 'Main CTA'),\r\n    extraClass: select('Styles', btnOptions, 'btn-large'),\r\n    isdisabled: boolean('isdisabled', false),\r\n    noExist: boolean('Animation No Exist', false),\r\n    backgroundColor: color('backgroundColor', '#fff', 'Background'),\r\n    isSecondary: true,\r\n  },\r\n})"
                }
            ],
            "stories/colors/colors.stories.ts": [
                {
                    "name": "category",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/colors/colors.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  primary: 'primary',\r\n  secondary: 'secondary',\r\n  teritary: 'teritary',\r\n  neutral: 'neutral',\r\n}"
                },
                {
                    "name": "colorOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/colors/colors.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  white: 'white',\r\n  black: 'black',\r\n}"
                },
                {
                    "name": "neutral",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'neutral', 'GROUP-ID3'),\r\n  },\r\n})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'primary', 'GROUP-ID3'),\r\n  },\r\n})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'secondary', 'GROUP-ID3'),\r\n  },\r\n})"
                },
                {
                    "name": "support",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatButtonModule, MatGridListModule, MatGridTile, MatGridList],\r\n  },\r\n  component: colorsComponent,\r\n  props: {\r\n    backgroundColor: color('backgroundColor', '#ffffff', 'Background'),\r\n    TextColor: color('TextColor', '#000000', 'TextColor'),\r\n    btnCategory: select('btnCategory', category, 'teritary', 'GROUP-ID3'),\r\n  },\r\n})"
                }
            ],
            "stories/checkbox/checkbox.stories.ts": [
                {
                    "name": "checkbox_list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'Group Checkbox Label 1',\r\n    checked: false,\r\n    id: 1,\r\n  },\r\n  {\r\n    name: 'Group Checkbox Label 2',\r\n    checked: false,\r\n    id: 2,\r\n  },\r\n  {\r\n    name: 'Group Checkbox Label 3',\r\n    checked: false,\r\n    id: 3,\r\n  },\r\n]"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: checkbox,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    iserror: true,\r\n  },\r\n})"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: checkbox,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    add: button(label, handler),\r\n    remove: button('Remove Checkbox', handler1),\r\n    isgroup: true,\r\n    values: checkbox_list,\r\n  },\r\n})"
                },
                {
                    "name": "handler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => add(checkbox_list)"
                },
                {
                    "name": "handler1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => remove(checkbox_list)"
                },
                {
                    "name": "label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "string",
                    "defaultValue": "'Add Checkbox'"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: checkbox,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    backgroundColor: color(\r\n      'backgroundColor',\r\n      'rgba(255,255,255,1)',\r\n      'Background'\r\n    ),\r\n    isprimary: true,\r\n  },\r\n})"
                }
            ],
            ".storybook/viewports.ts": [
                {
                    "name": "customViewports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/viewports.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  mobile1: {\r\n    name: '320px',\r\n    styles: {\r\n      width: '320px',\r\n      height: '963px',\r\n    },\r\n  },\r\n  mobile2: {\r\n    name: '360px',\r\n    styles: {\r\n      width: '360px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  mobile3: {\r\n    name: '400px',\r\n    styles: {\r\n      width: '400px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  mobile4: {\r\n    name: '480px',\r\n    styles: {\r\n      width: '480px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet1: {\r\n    name: '600px',\r\n    styles: {\r\n      width: '600px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet2: {\r\n    name: '720px',\r\n    styles: {\r\n      width: '720px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet3: {\r\n    name: '840px',\r\n    styles: {\r\n      width: '840px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  tablet4: {\r\n    name: '960px',\r\n    styles: {\r\n      width: '960px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop1: {\r\n    name: '1024px',\r\n    styles: {\r\n      width: '1024px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop2: {\r\n    name: '1280px',\r\n    styles: {\r\n      width: '1280px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop3: {\r\n    name: '1440px',\r\n    styles: {\r\n      width: '1440px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop4: {\r\n    name: '1600px',\r\n    styles: {\r\n      width: '1600px',\r\n      height: '801px',\r\n    },\r\n  },\r\n  desktop5: {\r\n    name: '1920px',\r\n    styles: {\r\n      width: '1920px',\r\n      height: '801px',\r\n    },\r\n  },\r\n}"
                }
            ],
            "apps/vtr/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/vtr/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "stories/radiobutton/radiobutton.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: radiobutton,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    horizontal: boolean('horizontal', false),\r\n    iserror: true,\r\n  },\r\n})"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: radiobutton,\r\n  props: {\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    isgroup: true,\r\n    values: radioBtn_list,\r\n    add: button(label, handler),\r\n    remove: button('Remove Radio Button', handler1),\r\n  },\r\n})"
                },
                {
                    "name": "handler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "() => add(radioBtn_list)"
                },
                {
                    "name": "handler1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "() => remove(radioBtn_list)"
                },
                {
                    "name": "label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "string",
                    "defaultValue": "'Add Radio Button'"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: radiobutton,\r\n  props: {\r\n    disabled: boolean('disabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    horizontal: boolean('horizontal', false),\r\n    isprimary: true,\r\n    backgroundColor: color(\r\n        'backgroundColor',\r\n        'rgba(255,255,255,1)',\r\n        'Background'\r\n      ),\r\n  },\r\n})"
                },
                {
                    "name": "radioBtn_list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'Radio Button 1',\r\n    id: 1,\r\n  },\r\n  {\r\n    name: 'Radio Button 2',\r\n    id: 2,\r\n  },\r\n  {\r\n    name: 'Radio Button 3',\r\n    id: 3,\r\n  },\r\n]"
                }
            ],
            "stories/toggle/toggle.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: toggle,\r\n  props: {\r\n    isdisabled: boolean('isdisabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    iserror: true,\r\n  },\r\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: toggle,\r\n  props: {\r\n    isdisabled: boolean('isdisabled', false),\r\n    label: boolean('label', false),\r\n    caption: boolean('caption', false),\r\n    isprimary: true,\r\n    backgroundColor: color(\r\n        'backgroundColor',\r\n        'rgba(255,255,255,1)',\r\n        'Background'\r\n      ),\r\n  },\r\n})"
                }
            ],
            "apps/vtr-e2e/src/support/app.po.ts": [
                {
                    "name": "getGreeting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "() => cy.get('h1')"
                }
            ],
            "stories/grid/grid.stories.ts": [
                {
                    "name": "grid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/grid/grid.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: Grid,\r\n  props: {\r\n  },\r\n})"
                }
            ],
            "stories/icons/icons.stories.ts": [
                {
                    "name": "icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/icons/icons.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: IconsComponent,\r\n  props: {\r\n    iconClass: text(\"Icon Class\", \"icon-battery-charging\"),\r\n    fontSize : select(\"Font Size\" , iconSize, \"md-icon\"),\r\n    fontColor: color('Font Color', '#000000'),\r\n    label : boolean(\"Label\",false),\r\n    backgroundColor: color('backgroundColor', '#ffff', 'Background'),\r\n  },\r\n})"
                },
                {
                    "name": "iconSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/icons/icons.stories.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'Extra Small' :  'xs-icon',\r\n  'Small' : 'sm-icon',\r\n  'Medium' : `md-icon`,\r\n  'Large' : 'lg-icon',\r\n  'Extra Large' : 'xl-icon'\r\n}"
                }
            ],
            "apps/vtr/src/app/reducers/homeproduct.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                    "type": "IHomeproduct",
                    "defaultValue": "{\r\n  list: [],\r\n  loading: false,\r\n  error: null,\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "stories/checkbox/checkbox.stories.ts": [
                {
                    "name": "add",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "checkbox_list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "checkbox_list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "file": "stories/checkbox/checkbox.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "checkbox_list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "checkbox_list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "stories/radiobutton/radiobutton.stories.ts": [
                {
                    "name": "add",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "radioBtn_list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "radioBtn_list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "file": "stories/radiobutton/radiobutton.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "radioBtn_list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "radioBtn_list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "apps/vtr/src/app/reducers/homeproduct.reducer.ts": [
                {
                    "name": "HomeproductReducer",
                    "file": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 313,
                                "end": 319,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "",
                            "returnType": "string"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "apps/vtr/src/app/actions/homeproduct.actions.ts": [
                {
                    "name": "HomeproductActionTypes",
                    "childs": [
                        {
                            "name": "LoadHomeproducts",
                            "value": "[Homeproduct] Load Homeproducts"
                        },
                        {
                            "name": "LoadHomeproductsSuccess",
                            "value": "[Homeproduct] Load Homeproducts Success"
                        },
                        {
                            "name": "LoadHomeproductsFailure",
                            "value": "[Homeproduct] Load Homeproducts Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "apps/vtr/src/app/actions/homeproduct.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "apps/vtr/src/app/actions/homeproduct.actions.ts": [
                {
                    "name": "HomeproductActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadHomeproducts | LoadHomeproductsSuccess | LoadHomeproductsFailure",
                    "file": "apps/vtr/src/app/actions/homeproduct.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/viewports.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGreeting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/actions/homeproduct.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadHomeproducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/actions/homeproduct.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadHomeproductsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/actions/homeproduct.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadHomeproductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/components/homeproducts/homeproducts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeproductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/effects/homeproduct.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "homeproductEffect",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHomeproduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HomeproductReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/homeproduct.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationStateFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/app/services/homeproducts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomeproductsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/vtr/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui/src/lib/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bgerrorOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bginfoOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bgsuccessOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bgwarningOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "btnOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "linkOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "checkboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "checkadd",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "remove",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkbox_list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handler",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handler1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "colorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "category",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colorOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "neutral",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "support",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/grid/grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "grid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/icons/icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "inputsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "affixTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Code",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "position",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Price",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "styles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "radiobuttonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "radioAdd",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "remove",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handler",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handler1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radioBtn_list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "toggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "typographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "alignOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bigsizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "body",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colorOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colorVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textcombinations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textComboOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}